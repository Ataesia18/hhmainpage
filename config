$tt-button-sm: none;
$fz-buttons-sm-all: (3rem, null, null);
$bc-buttons: small;
$text-color: #ffffff;
$color-h1: #eef3f6;
$tt-h1: none;
$color-h2: #0475d5;
$tt-h2: none;
$ta-base: center;
$ff-headlines: "Indie Flower";
$fc-headlines: H2;

$fz-h4-all: (1.4rem, 1.12rem, 0.7rem);
$fz-h3-all: (28px, 22.4px, 18.2px);
$fz-h2-all: (2.5rem, 2.4rem, 2.1rem);
$fz-h1-all: (10rem, 2rem, null);
$fz-base-all: (5rem, null, null);

$spacer-container-all: (8rem, null, 4rem);

$color-background: #ffffff;
$color-default: #000000;
$color-secondary: #163f63;
$color-primary: #0475d5;
$color-lightgrey: #ebedee;
$color-user-2: #035aa3;
$color-user-1: #ebedee;

$button-background-active: #035aa3;
$tt-buttons: uppercase;
$button-background: #0475d5;
$tt-headlines: uppercase;

$font-default: "Indie Flower";
$font-special: "Orbitron";

$fw-base: 400;
$fw-bold: 700;
$fw-extrabold: 900;

/**
 * Banner
 * Last Update: 2021-05-11T08:12:52+02:00
 * 
 * @Param("arrow_no_label", type="choice", options={"choices"={"none_default", "plain", "boxed"}, "expanded"=1}, group="arrow_one") 
 * @Param("arrow-color", type="color", visibility={"arrow_no_label"={"plain", "boxed"}}, group="arrow_one")
 * @Param("hover-effect", type="choice", visibility={"arrow_no_label"={"plain", "boxed"}}, options={"choices"={"none", "animation_fade"}, "expanded"=1}, group="arrow_one")
 * @Param("arrow-background", visibility={"arrow_no_label" : "boxed"}, type="color", group="arrow_one")
 * @Param("arrow-padding", type="spacing", visibility={"arrow_no_label"={"boxed"}}, options={"units"={"px", "rem", "%", "vh", "vw"}, "responsive"=1}, group="arrow_one")
 * @Param("arrow-border-style", visibility={"arrow_no_label" : "boxed"}, type="choice", options={"choices"={"none","solid", "dashed", "dotted", "double"}, "expanded"=1}, group="arrow_one")
 * @Param("arrow-border-width", visibility={"arrow_no_label" : "boxed", "arrow-border-style"={"solid", "dashed", "dotted", "double"}}, type="spacing", options={"units"={"px", "rem", "vh", "vw"}, "responsive"=1}, group="arrow_one")
 * @Param("arrow-border-color", visibility={"arrow_no_label" : "boxed", "arrow-border-style"={"solid", "dashed", "dotted", "double"}}, type="color", group="arrow_one")
 * @Param("arrow-border-radius", visibility={"arrow_no_label" : "boxed"}, type="border-radius", options={"units"={"px", "rem", "%", "vh", "vw"}, "responsive"=1}, group="arrow_one")
 * @Param("box-shadow-primary", visibility={"arrow_no_label" : "boxed"}, type="shadow", group="arrow_one") 
 * @Param("set-height-subpage", type="choice", options={"choices"={"default", "set_height"}, "expanded"=1}, group="other")
 * @Param("min-height-subpage", type="number", visibility={"set-height-subpage"={"set_height"}}, options={"units"={"auto", "px", "rem", "%", "vh", "vw"}, "responsive"=1}, group="other")
 * @Param("animate-background", type="choice", options={"choices"={"none_default", "zoominout", "move_horizontal", "move_vertical"}, "width"=50},group="other")
 * @Param("animation-speed", type="number", visibility={"animate-background"={"zoominout", "move_horizontal", "move_vertical"}}, options={"units"={"s"}, "responsive"=1, "width"=50}, group="other")
 
 */
@mixin banner-v3(
	$arrow_no_label: plain, 
	$arrow-color: $white, 
	$hover-effect: none, 
	$arrow-background: $color-default, 
	$arrow-padding: 1rem, 
	$arrow-border-style: none, 
	$arrow-border-width: 1px, 
	$arrow-border-color: $color-secondary, 
	$arrow-border-radius: 0, 
	$box-shadow-primary: none, 
	$set-height-subpage: default, 
	$min-height-subpage: 500px, 
	$animate-background: none_default, 
	$animation-speed: 30s
) {
	$animation-speed-lg: nth(inherit-list($animation-speed),1);
	$animation-speed-md: nth(inherit-list($animation-speed),2);
	$animation-speed-xs: nth(inherit-list($animation-speed),3);

	//Color Contrast

	$background-check: first-color($arrow-background, $color-background);
	$arrow-color: if($arrow_no_label == "boxed", first-color($arrow-color, preset-accent-color($background-check)), $arrow-color);

	@keyframes zoominout {
		0% { transform: scale(1.0, 1.0); }
		50% { transform: scale(1.3, 1.3); }
		100% { transform: scale(1.0, 1.0); }
	}

	@keyframes move_horizontal {
		0% { transform: scale(1.3) translateX(0%); }
		50% { transform: scale(1.3) translateX(5%); }
		100% { transform: scale(1.3) translateX(0%); }
	}

	@keyframes move_vertical {
		0% { transform: scale(1.3) translateY(0%); }
		50% { transform: scale(1.3) translateY(5%); }
		100% { transform: scale(1.3) translateY(0%); }
	}

	// Background animation (if activated) 
	@if $animate-background == "zoominout" {
		@supports not (-ms-high-contrast: none) {
			/* Non-IE styles here */
			.background {
				overflow: hidden;
			
				.ed-element {
					animation: $animation-speed-lg linear 1s normal none infinite zoominout;
				
					@media screen and(max-width: $breakpoint-md-max) {
						animation: $animation-speed-md linear 1s normal none infinite zoominout;
					}
					@media screen and(max-width: $breakpoint-xs-max) {
						animation: $animation-speed-xs linear 1s normal none infinite zoominout;
					}
				}
			}
		}
	}

	// Background animation (if activated) 
	@else if $animate-background == "move_horizontal" {
		@supports not (-ms-high-contrast: none) {
			/* Non-IE styles here */
			.background {
				overflow: hidden;
			
				.ed-element {
					animation: $animation-speed-lg linear 1s normal none infinite move_horizontal;
				
					@media screen and(max-width: $breakpoint-md-max) {
						animation: $animation-speed-md linear 1s normal none infinite move_horizontal;
					}
					@media screen and(max-width: $breakpoint-xs-max) {
						animation: $animation-speed-xs linear 1s normal none infinite move_horizontal;
					}
				}
			}
		}
	}

	// Background animation (if activated) 
	@else if $animate-background == "move_vertical" {
		@supports not (-ms-high-contrast: none) {
			/* Non-IE styles here */
			.background {
				overflow: hidden;
			
				.ed-element {
					animation: $animation-speed-lg linear 1s normal none infinite move_vertical;
				
					@media screen and(max-width: $breakpoint-md-max) {
						animation: $animation-speed-md linear 1s normal none infinite move_vertical;
					}
					@media screen and(max-width: $breakpoint-xs-max) {
						animation: $animation-speed-xs linear 1s normal none infinite move_vertical;
					}
				}
			}
		}
	}

	@if $set-height-subpage != "default" {
		// min height for subpages
		body:not(.index) & {
			@include media-constructor(min-height, extend-constructor('',$min-height-subpage,' !important'));
		}
	
		// Internet Explorer scaling fix
		@media (-ms-high-contrast: none), (-ms-high-contrast: active) {
			body:not(.index) & {
				@include media-constructor(min-height, extend-constructor('',$min-height-subpage,' !important'));
			}
		}
	}

	> .inner {
		> .ed-container,
		> .ed-reference-container { width: 100%; }
	}

	// Arrow
	@if $arrow_no_label == "plain" or $arrow_no_label == "boxed" {
		.banner-arrow {
			transform: translate(-50%, 5px) !important;
		
			a { display: block; }
		
			svg {
				display: block;
				fill: $arrow-color;
			}
		
			@if $hover-effect != "none" {
				transition: $transition-base;
			
				&:hover { transform: translate(-50%,0px) !important; }
			}
		}
	}
	@else  {
		.banner-arrow {
			display: none;
			visibility: hidden;
			pointer-events: none;
		}
	}
	@if $arrow_no_label == "boxed" {
		.banner-arrow {
			a {
				@include media-constructor(padding, $arrow-padding);
			}
		
			//Border
			@include media-constructor(border-width, $arrow-border-width);
		
			border: {
				style: $arrow-border-style;
				color: $arrow-border-color;
			}
		
			//Border Radius
			@include media-constructor(border-radius, $arrow-border-radius);
		
			//Box Shadow
			@include media-constructor(box-shadow, $box-shadow-primary);
		
			background: $arrow-background;
		}
	}
}

/**
 * Menu V2
 * Last Update: 2021-09-15T07:23:45+02:00
 * 
 * @Param("menu-wrapper-background", type="color-type-selector", group="menu-wrapper")
 * @Param("menu-wrapper-align", type="choice", options={"choices"={"flex_start_menu", "center_menu", "flex_end_menu", "space_around_menu", "space_between_menu"}, "expanded"=1}, group="menu-wrapper")
 * @Param("menu-wrapper-padding", type="spacing", options={"units"={"px", "rem", "%", "vh", "vw"}, "responsive"=1}, group="menu-wrapper")
 * @Param("logo-position", type="choice", options={"choices"={"default", "top"}, "expanded"=1}, group="menu-wrapper")
 * @Param("logo-padding",  type="spacing", visibility={"logo-position"={"top"}}, options={"units"={"px", "rem", "%", "vh", "vw"}, "separator"=1}, group="menu-wrapper")
 * @Param("menu-logo-width", type="choice", visibility={"logo-position"={"top"}}, options={"choices"={"default", "wide"}, "expanded"=1}, group="menu-wrapper")
 * @Param("menu-padding-outer", type="spacing", visibility={"logo-position"={"top"}}, options={"units"={"px", "rem", "%", "vh", "vw"}}, group="menu-wrapper")
 * @Param("menu-logo-background", type="color-type-selector", visibility={"logo-position"={"top"}}, group="menu-wrapper")
 * @Param("menu-wrapper-sticky", type="choice", options={"choices"={"sticky_none", "sticky_instant", "sticky_menu", "sticky_banner", "sticky_reverse"}}, group="menu-sticky")
 * @Param("sticky-animation", type="bool",  visibility={"menu-wrapper-sticky"={"sticky_menu", "sticky_banner", "sticky_reverse"}}, group="menu-sticky")
 * @Param("menu-wrapper-sticky-background", type="color-type-selector", visibility={"menu-wrapper-sticky"={"sticky_menu", "sticky_banner", "sticky_reverse"}}, group="menu-sticky")
 * @Param("logo-width-sticky", type="number", visibility={"menu-wrapper-sticky"={"sticky_menu", "sticky_banner", "sticky_reverse"}}, options={"units"={"auto", "px", "rem", "%", "vh", "vw"}, "responsive"=1}, group="menu-sticky")
 * @Param("menu-wrapper-shadow", type="shadow", visibility={"menu-wrapper-sticky"={"sticky_instant", "sticky_menu", "sticky_banner", "sticky_reverse"}}, options={"responsive"=1}, group="menu-sticky")
 * @Param("menu-color-choice", type="choice", options={"choices"={"menu_items", "submenu_items"}, "expanded"=1}, group="menu-items")
 * @Param("hover-style", type="choice", visibility={"menu-color-choice" : "menu_items"}, options={"choices"={"hover_none", "hover_text_color", "hover_box_fade", "hover_box_vertical", "hover_box_horizontal", "hover_box_top", "hover_box_bottom", "hover_box_left", "hover_box_right", "hover_box_zoom", "hover_border", "hover_border_vertical", "hover_border_horizontal", "hover_border_top", "hover_border_bottom"}}, group="menu-items")
 * @Param("menu-color", type="color", visibility={"menu-color-choice" : "menu_items"}, options={"width"=60}, group="menu-items")
 * @Param("menu-color-active", type="color", visibility={"menu-color-choice" : "menu_items"}, options={"width"=40}, group="menu-items")
 * @Param("menu-color-mobile", type="color", visibility={"menu-color-choice" : "menu_items"}, options={"width"=60}, group="menu-items")
 * @Param("menu-color-mobile-active", type="color", visibility={"menu-color-choice" : "menu_items"}, options={"width"=40}, group="menu-items")
 * @Param("menu-color-sticky", type="color",  visibility={"menu-color-choice" : "menu_items", "menu-wrapper-sticky"={"sticky_menu", "sticky_banner", "sticky_reverse"}}, options={"width"=60}, group="menu-items")
 * @Param("menu-color-active-sticky", type="color", visibility={"menu-color-choice" : "menu_items", "menu-wrapper-sticky"={"sticky_menu", "sticky_banner", "sticky_reverse"}}, options={"width"=40}, group="menu-items")
 * @Param("hover-border-size", visibility={"menu-color-choice" : "menu_items", "hover-style"={"hover_border", "hover_border_vertical", "hover_border_horizontal", "hover_border_top", "hover_border_bottom"}}, type="number", options={"units"={"px", "rem", "vh", "vw"}, "responsive"=1}, group="menu-items") 
 * @Param("hover-border-radius", visibility={"menu-color-choice" : "menu_items", "hover-style"={"hover_box_fade", "hover_box_vertical", "hover_box_horizontal", "hover_box_top", "hover_box_bottom", "hover_box_left", "hover_box_right", "hover_box_zoom", "hover_border", "hover_border_vertical", "hover_border_horizontal", "hover_border_top", "hover_border_bottom"}}, type="border-radius", options={"units"={"px", "rem", "%", "vh", "vw"}, "responsive"=1}, group="menu-items") 
 * @Param("menu-margin", type="number",visibility={"menu-color-choice" : "menu_items"}, options={"units"={"px", "rem", "%", "vh", "vw"}, "responsive"=1}, group="menu-items")
 * @Param("menu-padding", type="spacing",visibility={"menu-color-choice" : "menu_items"}, options={"units"={"px", "rem", "%", "vh", "vw"}, "responsive"=1}, group="menu-items")
 * @Param("menu-link-font", type="choice", visibility={"menu-color-choice" : "menu_items"}, options={"choices"={"link-default-font", "link-special-font"}}, group="menu-items")
 * @Param("menu-link-fz", type="number", visibility={"menu-color-choice" : "menu_items"}, options={"units"={"px", "rem", "%", "vh", "vw"}, "responsive"=1}, group="menu-items")
 * @Param("menu-link-fw", type="choice", visibility={"menu-color-choice" : "menu_items"}, options={"choices"={100,200,300,400,500,600,700,800,900}}, group="menu-items")
 * @Param("menu-link-font-style", type="choice", visibility={"menu-color-choice" : "menu_items"}, options={"choices"={"normal", "italic"}, "expanded"=1}, group="menu-items")
 * @Param("menu-link-letter-spacing", type="number", visibility={"menu-color-choice" : "menu_items"}, options={"units"={"px", "rem", "vh", "vw"}, "responsive"=1}, group="menu-items")
 * @Param("menu-link-tt", type="choice", visibility={"menu-color-choice" : "menu_items"}, options={"choices"={"none","uppercase","lowercase"}, "expanded"=1}, group="menu-items")
 * @Param("submenu-hover-style", type="choice", visibility={"menu-color-choice" : "submenu_items"}, options={"choices"={"hover_none", "hover_text_color", "hover_box_fade", "hover_box_vertical", "hover_box_horizontal", "hover_box_top", "hover_box_bottom", "hover_box_left", "hover_box_right", "hover_box_zoom", "hover_border", "hover_border_vertical", "hover_border_horizontal", "hover_border_top", "hover_border_bottom"}}, group="menu-items")
 * @Param("submenu-color", type="color", visibility={"menu-color-choice" : "submenu_items"}, options={"width"=60}, group="menu-items")
 * @Param("submenu-color-active", type="color", visibility={"menu-color-choice" : "submenu_items"}, options={"width"=40}, group="menu-items")
 * @Param("submenu-color-mobile", type="color", visibility={"menu-color-choice" : "submenu_items"}, options={"width"=60}, group="menu-items")
 * @Param("submenu-color-mobile-active", type="color", visibility={"menu-color-choice" : "submenu_items"}, options={"width"=40}, group="menu-items")
 * @Param("submenu-color-sticky", type="color", visibility={"menu-color-choice" : "submenu_items", "menu-wrapper-sticky"={"sticky_menu", "sticky_banner", "sticky_reverse"}}, options={"width"=60}, group="menu-items")
 * @Param("submenu-color-active-sticky", type="color", visibility={"menu-color-choice" : "submenu_items", "menu-wrapper-sticky"={"sticky_menu", "sticky_banner", "sticky_reverse"}}, options={"width"=40}, group="menu-items")
 * @Param("submenu-hover-border-size", visibility={"menu-color-choice" : "submenu_items", "submenu-hover-style"={"hover_border", "hover_border_vertical", "hover_border_horizontal", "hover_border_top", "hover_border_bottom"}}, type="number", options={"units"={"px", "rem", "vh", "vw"}, "responsive"=1}, group="menu-items") 
 * @Param("submenu-hover-border-radius", type="border-radius", visibility={"menu-color-choice" : "submenu_items", "submenu-hover-style"={"hover_box_fade", "hover_box_vertical", "hover_box_horizontal", "hover_box_top", "hover_box_bottom", "hover_box_left", "hover_box_right", "hover_box_zoom", "hover_border", "hover_border_vertical", "hover_border_horizontal", "hover_border_top", "hover_border_bottom"}}, options={"units"={"px", "rem", "%", "vh", "vw"}, "responsive"=1}, group="menu-items") 
 * @Param("submenu-margin", type="number", visibility={"menu-color-choice" : "submenu_items"}, options={"units"={"px", "rem", "%", "vh", "vw"}, "responsive"=1}, group="menu-items")
 * @Param("submenu-link-padding", type="spacing", visibility={"menu-color-choice" : "submenu_items"}, options={"units"={"auto", "px", "rem", "%", "vh", "vw"}, "responsive"=1}, group="menu-items")
 * @Param("submenu-link-font", type="choice", visibility={"menu-color-choice" : "submenu_items"}, options={"choices"={"link-default-font", "link-special-font"}}, group="menu-items")
 * @Param("submenu-link-fz", type="number", visibility={"menu-color-choice" : "submenu_items"}, options={"units"={"px", "rem", "%", "vh", "vw"}, "responsive"=1}, group="menu-items")
 * @Param("submenu-link-fw", type="choice", visibility={"menu-color-choice" : "submenu_items"}, options={"choices"={100,200,300,400,500,600,700,800,900}}, group="menu-items")
 * @Param("submenu-link-font-style", type="choice", visibility={"menu-color-choice" : "submenu_items"}, options={"choices"={"normal", "italic"}, "expanded"=1}, group="menu-items")
 * @Param("submenu-link-letter-spacing", type="number", visibility={"menu-color-choice" : "submenu_items"}, options={"units"={"px", "rem", "vh", "vw"}, "responsive"=1}, group="menu-items")
 * @Param("submenu-link-tt", type="choice", visibility={"menu-color-choice" : "submenu_items"}, options={"choices"={"none","uppercase","lowercase"}, "expanded"=1}, group="menu-items")
 * @Param("submenu-link-align", type="choice", visibility={"menu-color-choice" : "submenu_items"}, options={"choices"={"left", "center", "right"}, "responsive"=1, "expanded"=1}, group="menu-items")
 * @Param("menu-trigger-fullscreen", type="bool", group="mobile-trigger")
 * @Param("menu-breakpoint", type="number", visibility={"menu-trigger-fullscreen" : false}, options={"units"={"auto", "px", "rem", "vh", "vw"}}, group="mobile-trigger")
 * @Param("menu-trigger-color", type="color", options={"width"=70}, group="mobile-trigger") 
 * @Param("menu-trigger-color-active", type="color", options={"width"=30}, group="mobile-trigger")
 * @Param("menu-trigger-color-sticky", type="color", visibility={"menu-wrapper-sticky"={"sticky_menu", "sticky_banner", "sticky_reverse"}}, options={"width"=70},  group="mobile-trigger") 
 * @Param("menu-trigger-fixed", type="bool", group="mobile-trigger")
 * @Param("menu-trigger-margin", visibility={"menu-trigger-fixed" : true}, type="number", options={"units"={"px", "rem", "%", "vh", "vw"}, "responsive"=1}, group="mobile-trigger")
 * @Param("menu-trigger-position", type="choice", visibility={"menu-trigger-fixed" : true}, options={"choices"={"flex_start_menu", "flex_end_menu", "center_menu"}, "expanded"=1}, group="mobile-trigger")
 * @Param("menu-trigger-boxed", type="bool", group="mobile-trigger")
 * @Param("menu-trigger-boxed-color", type="color", visibility={"menu-trigger-boxed" : true}, options={"width"=70}, group="mobile-trigger")
 * @Param("menu-trigger-boxed-color-active", type="color", visibility={"menu-trigger-boxed" : true}, options={"width"=30}, group="mobile-trigger")
 * @Param("menu-trigger-boxed-color-sticky", type="color", visibility={"menu-wrapper-sticky"={"sticky_menu", "sticky_banner", "sticky_reverse"}, "menu-trigger-boxed" : true}, options={"width"=70, "separator"=true},  group="mobile-trigger")
 * @Param("menu-trigger-description", type="bool", visibility={"menu-trigger-boxed" : false}, group="mobile-trigger")
 * @Param("menu-trigger-description-only", type="bool", visibility={"menu-trigger-boxed" : false, "menu-trigger-description" : true}, group="mobile-trigger")
 * @Param("menu-trigger-description-name", type="input", visibility={"menu-trigger-boxed" : false, "menu-trigger-description" : true}, group="mobile-trigger")
 * @Param("menu-trigger-description-close-name", type="input", visibility={"menu-trigger-boxed" : false, "menu-trigger-description" : true}, group="mobile-trigger")
 * @Param("menu-trigger-description-position", type="choice", visibility={"menu-trigger-boxed" : false, "menu-trigger-description" : true, "menu-trigger-description-only" : false}, options={"choices"={"vertical_top", "vertical_bottom"}, "expanded"=1}, group="mobile-trigger")
 * @Param("menu-trigger-description-fz", type="number", visibility={"menu-trigger-boxed" : false, "menu-trigger-description" : true}, options={"units"={"px", "rem", "%", "vh", "vw"}, "responsive"=1, "separator"=1}, group="mobile-trigger")
 * @Param("extended-trigger-settings", type="bool", group="mobile-trigger")
 * @Param("menu-trigger-position-open", type="choice", visibility={"extended-trigger-settings" : true}, options={"choices"={"auto", "flex_start_menu", "flex_end_menu", "center_menu"}, "expanded"=1}, group="mobile-trigger")
 * @Param("menu-trigger-padding", type="number",  visibility={"extended-trigger-settings" : true}, options={"units"={"px", "rem", "%", "vh", "vw"}, "responsive"=1}, group="mobile-trigger")
 * @Param("menu-trigger-border-style", type="choice", visibility={"extended-trigger-settings" : true}, options={"choices"={"none", "solid", "dashed", "dotted", "double"}, "expanded"=1}, group="mobile-trigger") 
 * @Param("menu-trigger-border-width", visibility={"extended-trigger-settings" : true, "menu-trigger-border-style"={"solid", "dashed", "dotted", "double"}}, type="number", options={"units"={"px", "rem", "vh", "vw"}, "responsive"=1}, group="mobile-trigger") 
 * @Param("menu-trigger-border-color",type="color", visibility={"extended-trigger-settings" : true, "menu-trigger-border-style"={"solid", "dashed", "dotted", "double"}}, options={"width"=70}, group="mobile-trigger")
 * @Param("menu-trigger-border-color-active", type="color", visibility={"extended-trigger-settings" : true, "menu-trigger-border-style"={"solid", "dashed", "dotted", "double"}}, options={"width"=30}, group="mobile-trigger")
 * @Param("menu-trigger-border-color-sticky", type="color", visibility={"extended-trigger-settings" : true, "menu-trigger-border-style"={"solid", "dashed", "dotted", "double"}, "menu-wrapper-sticky"={"sticky_menu", "sticky_banner", "sticky_reverse"}}, options={"width"=70}, group="mobile-trigger")
 * @Param("menu-trigger-border-radius", type="border-radius",visibility={"extended-trigger-settings" : true}, options={"units"={"px", "rem", "%", "vh", "vw"}, "responsive"=1, "separator"=1}, group="mobile-trigger")
 * @Param("menu-trigger-width", type="number", visibility={"extended-trigger-settings" : true}, options={"units"={"px", "rem", "vh", "vw"}, "responsive"=1}, group="mobile-trigger")
 * @Param("menu-trigger-bar-height", type="number", visibility={"extended-trigger-settings" : true}, options={"units"={"px", "rem", "vh", "vw"}, "width"=50, "responsive"=1}, group="mobile-trigger")
 * @Param("menu-trigger-bar-spacing", type="number", visibility={"extended-trigger-settings" : true}, options={"units"={"px", "rem", "vh", "vw"}, "width"=50, "responsive"=1}, group="mobile-trigger")
 * @Param("menu-trigger-bar-radius", type="border-radius", visibility={"extended-trigger-settings" : true}, options={"units"={"px", "rem", "%", "vh", "vw"}, "responsive"=1}, group="mobile-trigger")
 * @Param("menu-trigger-style", type="choice", visibility={"extended-trigger-settings" : true}, options={"choices"={"default", "steps", "steps-centered", "offset-outer-small", "offset-outer-large", "small-outer", "small-inner"}, "width"=50}, group="mobile-trigger")
 * @Param("menu-trigger-flip", type="choice", visibility={"extended-trigger-settings" : true}, options={"choices"={"default", "flip_horizontal", "flip_vertical", "flip_horizontal-vertical"}, "width"=50}, group="mobile-trigger")
 * @Param("menu-trigger-animation", type="choice", visibility={"extended-trigger-settings" : true}, options={"choices"={"default", "squeeze", "rotate", "rotate-fast", "collapse-down", "turn", "minus"}, "width"=50}, group="mobile-trigger")
 * @Param("menu-trigger-animation-duration", type="number", visibility={"extended-trigger-settings" : true}, options={"units"={"s"}, "width"=50}, group="mobile-trigger")
 * @Param("menu-background-mobile", type="color-type-selector", group="mobile-menu")
 * @Param("menu-size", type="number", options={"units"={"auto", "px", "rem", "%", "vh", "vw"}, "responsive"=1}, group="mobile-menu")
 * @Param("menu-open-align", type="choice", options={"choices"={"flex_start_menu", "flex_end_menu", "center_menu"}, "expanded"=1}, group="mobile-menu")
 * @Param("menu-padding-open", type="spacing", options={"units"={"px", "rem", "%", "vh", "vw"}, "responsive"=1}, group="mobile-menu")
 * @Param("menu-animation", type="choice", options={"choices"={"animation_right", "animation_bottom", "animation_left", "animation_top", "animation_fade"}, "expanded"=1}, group="mobile-menu")
 * @Param("menu-animation-duration", type="number", options={"units"={"s"}}, group="mobile-menu")
 * @Param("menu-position", type="choice", options={"choices"={"flex_start_menu", "flex_end_menu", "vertical_top"}, "expanded"=1}, group="mobile-menu")
 * @Param("menu-orientation-fullscreen", type="choice", visibility={"menu-trigger-fullscreen" : true}, options={"choices"={"menu_orientation_row", "menu_orientation_column"}, "expanded"=1}, group="mobile-menu")
 * @Param("submenu-background", type="color-type-selector", group="submenu-box") 
 * @Param("submenu-background-mobile", type="color-type-selector", group="submenu-box") 
 * @Param("submenu-background-sticky", type="color-type-selector",visibility={"menu-wrapper-sticky"={"sticky_menu", "sticky_banner", "sticky_reverse"}}, group="submenu-box")
 * @Param("submenu-animation", type="choice", options={"choices"={"animation_right", "animation_bottom", "animation_left", "animation_top", "animation_fade"}, "expanded"=1}, group="submenu-box")
 * @Param("submenu-animation-duration", type="number", options={"units"={"s"}}, group="submenu-box")
 * @Param("submenu-direction", type="choice", options={"choices"={"animation_top", "animation_bottom"}, "expanded"=1}, group="submenu-box")
 * @Param("submenu-horizontal", type="choice", visibility={"menu-trigger-fullscreen" : false}, options={"choices"={"menu_orientation_row", "menu_orientation_column"}, "expanded"=1}, group="submenu-box")
 * @Param("submenu-horizontal-align", type="choice", visibility={"menu-trigger-fullscreen" : false, "submenu-horizontal"={"menu_orientation_row"}}, options={"choices"={"flex_start_menu","flex_end_menu", "center_menu", "space_around_menu", "space_between_menu"}, "expanded"=1}, group="submenu-box")
 * @Param("submenu-min-width", type="number", options={"units"={"px", "rem", "%", "vh", "vw"}}, group="submenu-box")
 * @Param("submenu-padding", type="number", options={"units"={"px", "rem", "%", "vh", "vw"}, "responsive"=1}, group="submenu-box")
 */
@mixin menu-v2(
	$menu-wrapper-background: $color-background, 
	$menu-wrapper-align: flex_end_menu, 
	$menu-wrapper-padding: 1rem, 
	$logo-position: default, 
	$logo-padding: 1rem, 
	$menu-logo-width: default, 
	$menu-padding-outer: 0rem, 
	$menu-logo-background: $menu-wrapper-background, 
	$menu-wrapper-sticky: sticky_menu, 
	$sticky-animation: true, 
	$menu-wrapper-sticky-background: $menu-wrapper-background, 
	$logo-width-sticky: auto, 
	$menu-wrapper-shadow: 2px 2px 4px 0 rgba(0,0,0,0.2), 
	$menu-color-choice: menu_items, 
	$hover-style: hover_box_bottom, 
	$menu-color: $none, 
	$menu-color-active: $none, 
	$menu-color-mobile: $menu-color, 
	$menu-color-mobile-active: $menu-color-active, 
	$menu-color-sticky: $menu-color, 
	$menu-color-active-sticky: $menu-color-active, 
	$hover-border-size: 3px, 
	$hover-border-radius: 0px, 
	$menu-margin: 2rem, 
	$menu-padding: 1rem, 
	$menu-link-font: link-default-font, 
	$menu-link-fz: $fz-base-all, 
	$menu-link-fw: $fw-base, 
	$menu-link-font-style: normal, 
	$menu-link-letter-spacing: 0, 
	$menu-link-tt: uppercase, 
	$submenu-hover-style: hover_box_bottom, 
	$submenu-color: $menu-color, 
	$submenu-color-active: $menu-color-active, 
	$submenu-color-mobile: $submenu-color, 
	$submenu-color-mobile-active: $submenu-color-active, 
	$submenu-color-sticky: $submenu-color, 
	$submenu-color-active-sticky: $submenu-color-active, 
	$submenu-hover-border-size: 3px, 
	$submenu-hover-border-radius: 0px, 
	$submenu-margin: 1rem, 
	$submenu-link-padding: 1rem, 
	$submenu-link-font: link-default-font, 
	$submenu-link-fz: 0.85rem, 
	$submenu-link-fw: $fw-base, 
	$submenu-link-font-style: normal, 
	$submenu-link-letter-spacing: 0, 
	$submenu-link-tt: uppercase, 
	$submenu-link-align: (left, center, null), 
	$menu-trigger-fullscreen: false, 
	$menu-breakpoint: auto, 
	$menu-trigger-color: $none, 
	$menu-trigger-color-active: $menu-trigger-color, 
	$menu-trigger-color-sticky: $menu-trigger-color, 
	$menu-trigger-fixed: false, 
	$menu-trigger-position: flex_end_menu, 
	$menu-trigger-margin: 2vw, 
	$menu-trigger-boxed: false, 
	$menu-trigger-boxed-color: $none, 
	$menu-trigger-boxed-color-active: $menu-trigger-boxed-color, 
	$menu-trigger-boxed-color-sticky: $menu-trigger-boxed-color, 
	$menu-trigger-description: false, 
	$menu-trigger-description-only: false, 
	$menu-trigger-description-name: Menu, 
	$menu-trigger-description-close-name: Close, 
	$menu-trigger-description-position: vertical_top, 
	$menu-trigger-description-fz: 0.65rem, 
	$extended-trigger-settings: false, 
	$menu-trigger-position-open: auto, 
	$menu-trigger-padding: 0px, 
	$menu-trigger-border-style: none, 
	$menu-trigger-border-width: 1px, 
	$menu-trigger-border-color: $none, 
	$menu-trigger-border-color-active: $menu-trigger-border-color, 
	$menu-trigger-border-color-sticky: $menu-trigger-border-color, 
	$menu-trigger-border-radius: 0, 
	$menu-trigger-width: 30px, 
	$menu-trigger-bar-height: 3px, 
	$menu-trigger-bar-spacing: 8px, 
	$menu-trigger-bar-radius: 0, 
	$menu-trigger-style: default, 
	$menu-trigger-flip: default, 
	$menu-trigger-animation: default, 
	$menu-trigger-animation-duration: 0.15s, 
	$menu-background-mobile: $menu-wrapper-background, 
	$menu-size: 100%, 
	$menu-open-align: center_menu, 
	$menu-padding-open: 1rem, 
	$menu-animation: animation_fade, 
	$menu-animation-duration: 0.3s, 
	$menu-position: flex_end_menu, 
	$menu-orientation-fullscreen: menu_orientation_column, 
	$submenu-background: $menu-wrapper-background, 
	$submenu-background-mobile: $submenu-background, 
	$submenu-background-sticky: $submenu-background, 
	$submenu-animation: animation_fade, 
	$submenu-animation-duration: 0.3s, 
	$submenu-direction: animation_bottom, 
	$submenu-horizontal: menu_orientation_column, 
	$submenu-horizontal-align: center_menu, 
	$submenu-min-width: 10rem, 
	$submenu-padding: 0px
) {
	// Initialize Responsive variables
	$logo-width-sticky-lg: nth(inherit-list($logo-width-sticky),1);
	$logo-width-sticky-md: nth(inherit-list($logo-width-sticky),2);
	$logo-width-sticky-xs: nth(inherit-list($logo-width-sticky),3);

	$menu-margin-lg: nth(inherit-list($menu-margin),1);
	$menu-margin-md: nth(inherit-list($menu-margin),2);
	$menu-margin-xs: nth(inherit-list($menu-margin),3);
	$menu-size-lg: nth(inherit-list($menu-size),1);
	$menu-size-md: nth(inherit-list($menu-size),2);
	$menu-size-xs: nth(inherit-list($menu-size),3);

	$submenu-margin-lg: nth(inherit-list($submenu-margin),1);
	$submenu-margin-md: nth(inherit-list($submenu-margin),2);
	$submenu-margin-xs: nth(inherit-list($submenu-margin),3);

	$menu-padding-lg: nth(inherit-list($menu-padding),1);
	$menu-padding-md: nth(inherit-list($menu-padding),2);
	$menu-padding-xs: nth(inherit-list($menu-padding),3);
	$menu-link-fz-lg: nth(inherit-list($menu-link-fz),1);
	$menu-link-fz-md: nth(inherit-list($menu-link-fz),2);
	$menu-link-fz-xs: nth(inherit-list($menu-link-fz),3);

	$hover-border-size-lg: nth(inherit-list($hover-border-size),1);
	$hover-border-size-md: nth(inherit-list($hover-border-size),2);
	$hover-border-size-xs: nth(inherit-list($hover-border-size),3);
	$hover-border-radius-lg: nth(inherit-list($hover-border-radius),1);
	$hover-border-radius-md: nth(inherit-list($hover-border-radius),2);
	$hover-border-radius-xs: nth(inherit-list($hover-border-radius),3);

	$submenu-link-padding-lg: nth(inherit-list($submenu-link-padding),1);
	$submenu-link-padding-md: nth(inherit-list($submenu-link-padding),2);
	$submenu-link-padding-xs: nth(inherit-list($submenu-link-padding),3);
	$submenu-link-fz-lg: nth(inherit-list($submenu-link-fz),1);
	$submenu-link-fz-md: nth(inherit-list($submenu-link-fz),2);
	$submenu-link-fz-xs: nth(inherit-list($submenu-link-fz),3);
	$submenu-hover-border-size-lg: nth(inherit-list($submenu-hover-border-size),1);
	$submenu-hover-border-size-md: nth(inherit-list($submenu-hover-border-size),2);
	$submenu-hover-border-size-xs: nth(inherit-list($submenu-hover-border-size),3);
	$submenu-hover-border-radius-lg: nth(inherit-list($submenu-hover-border-radius),1);
	$submenu-hover-border-radius-md: nth(inherit-list($submenu-hover-border-radius),2);
	$submenu-hover-border-radius-xs: nth(inherit-list($submenu-hover-border-radius),3);

	$menu-trigger-border-width-lg: nth(inherit-list($menu-trigger-border-width),1);
	$menu-trigger-border-width-md: nth(inherit-list($menu-trigger-border-width),2);
	$menu-trigger-border-width-xs: nth(inherit-list($menu-trigger-border-width),3);
	$menu-trigger-padding-lg: nth(inherit-list($menu-trigger-padding),1);
	$menu-trigger-padding-md: nth(inherit-list($menu-trigger-padding),2);
	$menu-trigger-padding-xs: nth(inherit-list($menu-trigger-padding),3);

	// Color Checks
	$menu-wrapper-background-check: first-color($menu-wrapper-background, $color-background);
	$menu-wrapper-background-sticky-check: first-color($menu-wrapper-sticky-background, $menu-wrapper-background-check);
	$menu-background-mobile-check: first-color($menu-background-mobile, $menu-wrapper-background-check);

	// Submenu Color Checks

	$submenu-background-check: first-color($submenu-background, $color-background);
	$submenu-background-sticky-check: first-color($submenu-background-sticky, $submenu-background-check);
	$submenu-background-mobile-check: first-color($submenu-background-mobile, $submenu-background-check);

	// Menu color

	$menu-color: first-color($menu-color,preset-text-color($menu-wrapper-background-check));
	$menu-color-active-contrast: if(type-of($menu-color-active) == color, preset-text-color($menu-color-active), preset-text-color($menu-color));
	$menu-color-mobile: first-color($menu-color-mobile, if(type-of($menu-color) == color and $menu-wrapper-sticky-background == false, $menu-color, preset-text-color($menu-background-mobile-check)));
	$menu-color-mobile-active-contrast: if(type-of($menu-color-mobile-active) == color, preset-text-color($menu-color-mobile-active), preset-text-color($menu-color-mobile));
	$menu-color-sticky: first-color($menu-color-sticky, if(type-of($menu-color) == color and $menu-wrapper-sticky-background == false, $menu-color, preset-text-color($menu-wrapper-background-sticky-check)));
	$menu-color-active-sticky-contrast: if(type-of($menu-color-active-sticky) == color, preset-text-color($menu-color-active-sticky), preset-text-color($menu-color-sticky));

	// Menu trigger boxed
	$menu-trigger-boxed-color: first-color($menu-trigger-boxed-color, preset-text-color($menu-wrapper-background-check));
	$menu-trigger-boxed-color-active: first-color($menu-trigger-boxed-color-active, preset-text-color($menu-background-mobile-check));
	$menu-trigger-boxed-color-sticky: first-color($menu-trigger-boxed-color-sticky, preset-text-color($menu-wrapper-background-sticky-check));

	// Menu trigger
	$menu-trigger-color: first-color($menu-trigger-color, if($menu-trigger-boxed and type-of($menu-trigger-boxed-color) == color, preset-text-color($menu-trigger-boxed-color), preset-text-color($menu-wrapper-background-check)));
	$menu-trigger-color-active: first-color($menu-trigger-color-active, if($menu-trigger-boxed and type-of($menu-trigger-boxed-color) == color, preset-text-color($menu-trigger-boxed-color-active), preset-text-color($menu-background-mobile-check)));
	$menu-trigger-color-sticky: first-color($menu-trigger-color-sticky, if($menu-trigger-boxed and type-of($menu-trigger-boxed-color) == color, preset-text-color($menu-trigger-boxed-color-sticky), preset-text-color($menu-wrapper-background-check)));

	// Menu trigger border
	$menu-trigger-border-color: first-color($menu-trigger-border-color, $menu-trigger-color);
	$menu-trigger-border-color-active: first-color($menu-trigger-border-color-active, $menu-trigger-color-active);
	$menu-trigger-border-color-sticky: first-color($menu-trigger-border-color-sticky, $menu-trigger-color-sticky);

	// Submenu

	$submenu-color: first-color($submenu-color, if(type-of($submenu-background) == color, preset-text-color($submenu-background-check), preset-text-color($menu-wrapper-background-check)));
	$submenu-color-active-contrast: if(type-of($submenu-color-active) == color, preset-text-color($submenu-color-active), preset-text-color($submenu-color));
	$submenu-color-mobile: first-color($submenu-color-mobile, if(type-of($submenu-background-mobile) == color, preset-text-color($submenu-background-mobile-check), preset-text-color($menu-background-mobile-check)));
	$submenu-color-mobile-active-contrast: if(type-of($submenu-color-mobile-active) == color, preset-text-color($submenu-color-mobile-active), preset-text-color($submenu-color-mobile));
	$submenu-color-sticky: first-color($submenu-color-sticky, if(type-of($submenu-background-sticky) == color, preset-text-color($submenu-background-sticky-check), preset-text-color($menu-wrapper-background-sticky-check)));
	$submenu-color-active-sticky-contrast: if(type-of($submenu-color-active-sticky) == color, preset-text-color($submenu-color-active-sticky), preset-text-color($submenu-color-sticky));

	// Breakpoint

	$menu-breakpoint-min: null;
	$menu-breakpoint-max: null;

	@if $menu-breakpoint ==  auto {
		$menu-breakpoint-min: $breakpoint-md;
		$menu-breakpoint-max: $breakpoint-md-max;
	}

	@else  {
		$menu-breakpoint-min: $menu-breakpoint;
		$menu-breakpoint-max: $menu-breakpoint - 1;
	}

	/* Keyframe Animation for menu sticky_reverse - sticky*/
	@keyframes slideDown {
		from { transform: translateY(-100%); }
		to { transform: translateY(0); }
	}

	/* Keyframe Animation for menu banner - sticky*/
	@keyframes fadeIn {
		from { opacity: 0; }
		to { opacity: 1; }
	}

	// Just a reasonable default
	@at-root :root {
		--spacer-height: 105px;
	}

	@if $menu-wrapper-sticky != 'sticky_none' {

		&.sticky + .ed-element { margin-top: var(--spacer-height); }

	}

	@include preset-headline-color($menu-wrapper-background-check);

	flex-grow: 0;
	flex-shrink: 1;
	flex-basis: auto;
	z-index: 10;
	// Determine proper background color for logo
	@if $logo-background != false and $logo-transparent == false and abs(brightness($color-primary) - brightness($logo-background))>20% { background: $logo-background; }
	@else if $logo-luminance > 0.75 and $logo-transparent { background: color-contrast($white, $color-default, $color-secondary); }

	background: $menu-wrapper-background;

	> .inner {
		@include media-constructor-menu(
			padding, 
			$menu-breakpoint-max, 
			$menu-wrapper-padding
		);
	}

	/* NEW LOGO SETTING OPTION*/
	@if not $menu-trigger-fullscreen {
		@media screen and (min-width: $menu-breakpoint-min) {
			@if $logo-position == "top" {
				.ed-image,
				.logo {
					flex-basis: 100% !important;
					justify-content: center;
					display: flex;
				
					@include media-constructor(padding, $logo-padding);
				}
			
				.ed-menu {
					background: $menu-logo-background;
				
					@include media-constructor(padding, $menu-padding-outer);
				}
			
				@if $menu-logo-width == "wide" {
					>.inner {
						margin: 0;
						flex-basis: 100%;
						max-width: 100%;
						min-width: 100%;
					}
				}
			}
		
			@else  {
				.logo,
				.ed-image {
					* { margin: 0; }
				
					img {
						transition: $transition-base;
						max-width: 100%;
					}
				}
			}
		}
	}

	@media screen and (max-width: $menu-breakpoint-min) {
		.logo,
		.ed-image {
			* { margin: 0; }
		
			img {
				transition: $transition-base;
				max-width: 100%;
			}
		}
	}

	/**
							*  Menu
							* 
							* All Settings for Menu default
							*
							*/
	.ed-menu {
		// Positions Style for Links in menu
		ul {
			list-style: none;
			padding: 0;
			margin: 0;
		}
	
		@if not $menu-trigger-fullscreen {
			@media screen and (min-width: $menu-breakpoint-min) {
				ul {
					@if $menu-wrapper-align == "flex_start_menu" { justify-content: flex-start; }
					@else if $menu-wrapper-align == "center_menu" { justify-content: center; }
					@else if $menu-wrapper-align == "flex_end_menu" { justify-content: flex-end; }
					@else if $menu-wrapper-align == "space_around_menu" { justify-content: space-around; }
					@else if $menu-wrapper-align == "space_between_menu" { justify-content: space-between; }
				
					display: flex;
					text-align: right;
				
					li { display: inline-block; }
				}
			
				> ul > li:not(:first-child) { margin: 0 0 0 $menu-margin-lg; }
			}
		
			//fixes Scolling Behavior for iPad
			@media screen and (hover: none) and (min-width: $menu-breakpoint-min) {
				-webkit-overflow-scrolling: touch;
			}
		
			//IE-Fix: Link styles Media hover doesn't work on IE 
			@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) and (min-width: $menu-breakpoint-min) {
				ul {
					@if $menu-wrapper-align == "flex_start_menu" { justify-content: flex-start; }
					@else if $menu-wrapper-align == "center_menu" { justify-content: center; }
					@else if $menu-wrapper-align == "flex_end_menu" { justify-content: flex-end; }
					@else if $menu-wrapper-align == "space_around_menu" { justify-content: space-around; }
					@else if $menu-wrapper-align == "space_between_menu" { justify-content: space-between; }
				
					display: flex;
					text-align: right;
				
					li { display: inline-block; }
				}
			
				> ul > li:not(:first-child) { margin: 0 0 0 $menu-margin-lg; }
			}
		
			@media screen and (max-width: $menu-breakpoint-max) {
				> ul > li:not(:last-child) { margin: 0 0 $menu-margin-md 0; }
			}
			@media screen and (max-width: $breakpoint-xs-max) {
				> ul > li:not(:last-child) { margin: 0 0 $menu-margin-xs 0; }
			}
		}
	
		@else  {
			@if $menu-orientation-fullscreen == "menu_orientation_row" {
				> ul > li:not(:last-child) { margin: 0 $menu-margin-lg 0 0; }
			}
			@else  {
				> ul > li:not(:last-child) { margin: 0 0 $menu-margin-lg 0; }
			}
		
			@media screen and (max-width: $menu-breakpoint-max) {
				> ul > li:not(:last-child) { margin: 0 0 $menu-margin-md 0; }
			}
			@media screen and (max-width: $breakpoint-xs-max) {
				> ul > li:not(:last-child) { margin: 0 0 $menu-margin-xs 0; }
			}
		}
	
		// Menu Link Look/Style 
		a {
			transition: $transition-base;
			transition-property: background-color,
				color,
				margin;
			margin: 0;
			display: inline-block;
			text-decoration: none;
			text-transform: $menu-link-tt;
			font-weight: $menu-link-fw;
			font-style: $menu-link-font-style;
			position: relative;
			box-sizing: border-box;
			z-index: 10;
			line-height: 1;
			color: $menu-color-mobile;
		
			@if $menu-link-font == "link-default-font" { font-family: $font-default; }
			@else  { font-family: $ff-headlines; }
		
			@include media-constructor-menu(
				letter-spacing, 
				$menu-breakpoint-max, 
				$menu-link-letter-spacing
			);
		
			@if not $menu-trigger-fullscreen {
				@media screen and (min-width: $menu-breakpoint-min) {
					color: $menu-color;
				}
			
				//Media hover doesn't work on IE 
				@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) and (min-width: $menu-breakpoint-min) {
					color: $menu-color;
				}
			}
		}
	
		> ul > li {
			&:hover > a,
			> a.active {
				text-decoration: none;
				color: $menu-color-mobile-active-contrast;
			
				@if not $menu-trigger-fullscreen {
					@media screen and (min-width: $menu-breakpoint-min) {
						color: $menu-color-active-contrast;
					}
				
					//Media hover doesn't work on IE 
					@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) and (min-width: $menu-breakpoint-min) {
						color: $menu-color-active-contrast;
					}
				}
			}
		
			@include button-hover-style-border-radius(
				$padding: $menu-padding-xs, 
				$font-size: $menu-link-fz-xs, 
				$hover-style: $hover-style, 
				$color: $menu-color-mobile, 
				$color-active: $menu-color-mobile-active, 
				$hover-border-size: $hover-border-size-xs, 
				$hover-border-radius: $hover-border-radius-xs, 
				$selector: '> a', 
				$selector-hover: '&:hover > a, 
				> a.active'
			);
		
			@media screen and (min-width: $breakpoint-xs) and (max-width: $menu-breakpoint-max) {
				@include button-hover-style-border-radius(
					$padding: $menu-padding-md, 
					$font-size: $menu-link-fz-md, 
					$hover-style: $hover-style, 
					$color: $menu-color-mobile, 
					$color-active: $menu-color-mobile-active, 
					$hover-border-size: $hover-border-size-md, 
					$hover-border-radius: $hover-border-radius-md, 
					$selector: '> a', 
					$selector-hover: '&:hover > a, 
					> a.active'
				);
			}
		
			@if not $menu-trigger-fullscreen {
				@media screen and (min-width: $menu-breakpoint-min) {
					@include button-hover-style-border-radius(
						$padding: $menu-padding-lg, 
						$font-size: $menu-link-fz-lg, 
						$hover-style: $hover-style, 
						$color: $menu-color, 
						$color-active: $menu-color-active, 
						$hover-border-size: $hover-border-size-lg, 
						$hover-border-radius: $hover-border-radius-lg, 
						$selector: '> a', 
						$selector-hover: '&:hover > a, 
						> a.active'
					);
				}
			
				//Media hover doesn't work on IE 
				@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) and (min-width: $menu-breakpoint-min) {
					@include button-hover-style-border-radius(
						$padding: $menu-padding-lg, 
						$font-size: $menu-link-fz-lg, 
						$hover-style: $hover-style, 
						$color: $menu-color, 
						$color-active: $menu-color-active, 
						$hover-border-size: $hover-border-size-lg, 
						$hover-border-radius: $hover-border-radius-lg, 
						$selector: '> a', 
						$selector-hover: '&:hover > a, 
						> a.active'
					);
				}
			}
		
			> a {
				@include media-constructor-menu(
					font-size, 
					$menu-breakpoint-max, 
					$menu-link-fz
				);
			}
		}
	
		@media (max-width: $menu-breakpoint-max) {
			@if type-of($menu-background-mobile) == color or $menu-background-mobile == none { background: $menu-background-mobile-check; }
			@else  { background: $menu-background-mobile; }
		
			display: flex;
			align-items: center;
			justify-content: center;
			text-align: center;
			overflow-y: auto;
			-webkit-overflow-scrolling: touch;
		
			ul {
				max-height: 100%;
			
				>li {
					@if $menu-open-align == "flex_start_menu" { text-align: left; }
					@else if $menu-open-align == "center_menu" { text-align: center; }
					@else if $menu-open-align == "flex_end_menu" { text-align: right; }
				}
			}
		
			position: fixed;
			top: 0;
			left: 0;
			height: 100%;
			z-index: 4;
			pointer-events: none;
			opacity: 0;
		
			$x: 0;
			$y: 0;
		
			@if $menu-animation == "animation_right" {
				$x: -100%;
			}
			@if $menu-animation == "animation_left" {
				$x: 100%;
			}
			@if $menu-animation == "animation_bottom" {
				$y: -100%;
			}
			@if $menu-animation == "animation_top" {
				$y: 100%;
			}
		
			transform: translate3d($x,$y,0);
			transition: all $menu-animation-duration cubic-bezier(0.16, 0, 0.28, 0.99);
		
			a,
			a:hover,
			a.active { margin: 5px 0; }
		
			.menu-level-0 {
				@include media-constructor(padding, $menu-padding-open);
			}
		
			@if $menu-size-md != "100%" {
				max-width: 100%;
			
				@if $menu-position == "flex_end_menu" {
					right: 0;
					width: $menu-size-md;
					left: auto;
				}
			
				@if $menu-position == "flex_start_menu" {
					width: $menu-size-md;
					left: 0;
				}
			
				@if $menu-position == "vertical_top" {
					height: $menu-size-md;
					width: 100%;
					left: 0;
				}
			}
		}
	
		@media screen and(max-width: $breakpoint-xs-max) {
			.menu-level-0 {
				@include media-constructor(padding, $menu-padding-open);
			}
		
			@if $menu-size-xs != "100%" {
				max-width: 100%;
			
				@if $menu-position == "flex_end_menu" {
					right: 0;
					width: $menu-size-xs;
					left: auto;
				}
			
				@if $menu-position == "flex_start_menu" {
					width: $menu-size-xs;
					left: 0;
				}
			
				@if $menu-position == "vertical_top" {
					height: $menu-size-xs;
					width: 100%;
					left: 0;
				}
			}
		}
	
		@if $menu-trigger-fullscreen {
			@if type-of($menu-background-mobile) == color or $menu-background-mobile == none { background: $menu-background-mobile-check; }
			@else  { background: $menu-background-mobile; }
		
			display: flex;
			align-items: center;
			justify-content: center;
			text-align: center;
			overflow-y: auto;
			-webkit-overflow-scrolling: touch;
		
			ul { max-height: 100%; }
		
			position: fixed;
			top: 0;
			left: 0;
			height: 100%;
			z-index: 4;
			pointer-events: none;
			opacity: 0;
		
			$x: 0;
			$y: 0;
		
			@if $menu-animation == "animation_right" {
				$x: -100%;
			}
			@if $menu-animation == "animation_left" {
				$x: 100%;
			}
			@if $menu-animation == "animation_bottom" {
				$y: -100%;
			}
			@if $menu-animation == "animation_top" {
				$y: 100%;
			}
		
			transform: translate3d($x,$y,0);
			transition: all $menu-animation-duration cubic-bezier(0.16, 0, 0.28, 0.99);
		
			a,
			a:hover,
			a.active { margin: 5px 0; }
		
			@if $menu-size-lg != "100%" {
				max-width: 100%;
			
				@if $menu-position == "flex_end_menu" {
					right: 0;
					width: $menu-size-lg;
					left: auto;
				}
			
				@if $menu-position == "flex_start_menu" {
					width: $menu-size-lg;
					left: 0;
				}
			
				@if $menu-position == "vertical_top" {
					height: $menu-size-lg;
					width: 100%;
					left: 0;
				}
			}
		
			@media screen and (min-width: $menu-breakpoint-min) {
				.menu-level-0 {
					@include media-constructor(padding, $menu-padding-open);
				}
			
				@if $menu-orientation-fullscreen == "menu_orientation_row" {
					> ul {
						@if $menu-wrapper-align == "flex_start_menu" { justify-content: flex-start; }
						@else if $menu-wrapper-align == "center_menu" { justify-content: center; }
						@else if $menu-wrapper-align == "flex_end_menu" { justify-content: flex-end; }
						@else if $menu-wrapper-align == "space_around_menu" { justify-content: space-around; }
						@else if $menu-wrapper-align == "space_between_menu" { justify-content: space-between; }
					
						display: flex;
						position: relative;
					}
				
					//Submenu Fix for fullscreen horizontal menu
					.menu-sub:hover > .sub > ul,
					> .sub > ul:hover {
						visibility: visible;
						opacity: 1;
						transform: translate3d(0,0,0);
						pointer-events: all;
					}
				
					.menu-level-1,
					.menu-level-2 {
						position: absolute;
						max-height: none;
						visibility: hidden;
						opacity: 0;
						z-index: 5;
						transition: $transition-base;
						top: 100%;
						left: 0;
						pointer-events: all;
					
						a,
						a:hover,
						a.active { margin: 0px; }
					
						li:not(:first-child) { margin: $submenu-margin-lg   0 0 0; }
					}
				
					.menu-level-1 {
						@if $menu-size-lg == "auto" and $menu-position == "vertical_top" { position: relative; }
					}
				
					.menu-level-2 {
						@include media-constructor(left, extend-constructor('calc(100% + ',$submenu-padding,')'));
						@include media-constructor(top, extend-constructor('calc(0% - ',$submenu-padding,') !important'));
					}
				}
			
				@else  {
					ul >li {
						@if $menu-open-align == "flex_start_menu" { text-align: left; }
						@else if $menu-open-align == "center_menu" { text-align: center; }
						@else if $menu-open-align == "flex_end_menu" { text-align: right; }
					}
				}
			}
		
			//Media hover doesn't work on IE 
			@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) and (min-width: $menu-breakpoint-min) {
				@if $menu-size-lg != "100%" {
					max-width: 100%;
				
					@if $menu-position == "flex_end_menu" {
						right: 0;
						width: $menu-size-lg;
						left: auto;
					}
				
					@if $menu-position == "flex_start_menu" {
						width: $menu-size-lg;
						left: 0;
					}
				
					@if $menu-position == "vertical_top" {
						height: $menu-size-lg;
						width: 100%;
						left: 0;
					}
				}
			
				@if $menu-orientation-fullscreen == "menu_orientation_row" {
					ul {
						@if $menu-wrapper-align == "flex_start_menu" { justify-content: flex-start; }
						@else if $menu-wrapper-align == "center_menu" { justify-content: center; }
						@else if $menu-wrapper-align == "flex_end_menu" { justify-content: flex-end; }
						@else if $menu-wrapper-align == "space_around_menu" { justify-content: space-around; }
						@else if $menu-wrapper-align == "space_between_menu" { justify-content: space-between; }
					
						display: flex;
						text-align: right;
					
						li { display: inline-block; }
					}
				
					> ul {
						> li:not(:first-child) { margin: 0 0 0 $menu-margin-lg; }
						> li:first-child { margin: 0; }
					}
				}
			}
		}
	
		.menu-sub {
			position: relative;
		
			.menu-level-1,
			.menu-level-2 {
				@if type-of($submenu-background) == color or $submenu-background == none { background: $submenu-background-check; }
				@else  { background: $submenu-background; }
			
				@include media-constructor-menu(
					padding, 
					$menu-breakpoint-max, 
					$submenu-padding
				);
			
				a {
					width: 100%;
					display: block;
					color: $submenu-color-mobile;
					text-transform: $submenu-link-tt;
					font-weight: $submenu-link-fw;
					font-style: $submenu-link-font-style;
				
					@if $submenu-link-font == "link-default-font" { font-family: $font-default; }
					@else  { font-family: $ff-headlines; }
				
					@include media-constructor-menu(
						text-align, 
						$menu-breakpoint-max, 
						$submenu-link-align
					);
					@include media-constructor-menu(
						letter-spacing, 
						$menu-breakpoint-max, 
						$submenu-link-letter-spacing
					);
				
					@if not $menu-trigger-fullscreen {
						@media screen and (min-width: $menu-breakpoint-min) {
							color: $submenu-color;
						}
					
						//Media hover doesn't work on IE 
						@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) and (min-width: $menu-breakpoint-min) {
							color: $submenu-color;
						}
					}
				}
			
				> li {
					min-width: $submenu-min-width;
					width: 100%;
					display: block;
				
					@media screen and (max-width: $menu-breakpoint-max) {
						&:not(:last-child) { margin: $submenu-margin-md 0 $submenu-margin-md 0; }
					}
					@media screen and (max-width: $breakpoint-xs-max) {
						&:not(:last-child) { margin: $submenu-margin-xs 0 $submenu-margin-xs 0; }
					}
				
					&:hover > a,
					> a.active {
						text-decoration: none;
						color: $submenu-color-mobile-active-contrast;
					
						@if not $menu-trigger-fullscreen {
							@media screen and (min-width: $menu-breakpoint-min) {
								color: $submenu-color-active-contrast;
							}
						
							//Media hover doesn't work on IE 
							@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) and (min-width: $menu-breakpoint-min) {
								color: $submenu-color-active-contrast;
							}
						}
					}
				
					@include button-hover-style-border-radius(
						$padding: $submenu-link-padding-xs, 
						$font-size: $submenu-link-fz-xs, 
						$hover-style: $submenu-hover-style, 
						$color: $submenu-color-mobile, 
						$color-active: $submenu-color-mobile-active, 
						$hover-border-size: $submenu-hover-border-size-xs, 
						$hover-border-radius: $submenu-hover-border-radius-xs, 
						$selector: '> a', 
						$selector-hover: '&:hover > a, 
						> a.active'
					);
				
					@media screen and (min-width: $breakpoint-xs) and (max-width: $menu-breakpoint-max) {
						@include button-hover-style-border-radius(
							$padding: $submenu-link-padding-md, 
							$font-size: $submenu-link-fz-md, 
							$hover-style: $submenu-hover-style, 
							$color: $submenu-color-mobile, 
							$color-active: $submenu-color-mobile-active, 
							$hover-border-size: $submenu-hover-border-size-md, 
							$hover-border-radius: $submenu-hover-border-radius-md, 
							$selector: '> a', 
							$selector-hover: '&:hover > a, 
							> a.active'
						);
					}
				
					@if not $menu-trigger-fullscreen {
						@media screen and (min-width: $menu-breakpoint-min) {
							@include button-hover-style-border-radius(
								$padding: $submenu-link-padding-lg, 
								$font-size: $submenu-link-fz-lg, 
								$hover-style: $submenu-hover-style, 
								$color: $submenu-color, 
								$color-active: $submenu-color-active, 
								$hover-border-size: $submenu-hover-border-size-lg, 
								$hover-border-radius: $submenu-hover-border-radius-lg, 
								$selector: '> a', 
								$selector-hover: '&:hover > a, 
								> a.active'
							);
						}
					
						//Media hover doesn't work on IE 
						@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) and (min-width: $menu-breakpoint-min) {
							@include button-hover-style-border-radius(
								$padding: $submenu-link-padding-lg, 
								$font-size: $submenu-link-fz-lg, 
								$hover-style: $submenu-hover-style, 
								$color: $submenu-color, 
								$color-active: $submenu-color-active, 
								$hover-border-size: $submenu-hover-border-size-lg, 
								$hover-border-radius: $submenu-hover-border-radius-lg, 
								$selector: '> a', 
								$selector-hover: '&:hover > a, 
								> a.active'
							);
						}
					}
				
					> a {
						@include media-constructor-menu(
							font-size, 
							$menu-breakpoint-max, 
							$submenu-link-fz
						);
					}
				}
			}
		}
	
		// ONLY display view
		@media screen and (min-width: $menu-breakpoint-min) {
			@if not $menu-trigger-fullscreen {
				.menu-sub {
					position: relative;
				
					.menu-level-1,
					.menu-level-2 {
						visibility: hidden;
						opacity: 0;
						position: absolute;
						z-index: 5;
						flex-wrap: wrap;
						transition: $transition-base;
						left: 0;
					
						@if $submenu-direction == "animation_top" {
							top: auto;
							bottom: 100%;
						}
					
						@else  {
							bottom: auto;
							top: 100%;
						}
					
						$x: 0;
						$y: 0;
					
						@if $submenu-animation == "animation_right" {
							$x: -100%;
						}
						@if $submenu-animation == "animation_left" {
							$x: 100%;
						}
						@if $submenu-animation == "animation_top" {
							$y: -100%;
						}
						@if $submenu-animation == "animation_bottom" {
							$y: 100%;
						}
					
						transform: translate3d($x,$y,0);
						transition: all $submenu-animation-duration cubic-bezier(0.16, 0, 0.28, 0.99);
					
						@if $submenu-horizontal == "menu_orientation_column" {
							flex-direction: column;
						
							li:not(:first-child) { margin: $submenu-margin-lg 0 0 0; }
						}
					}
				
					//Submenu Level-2 position
					.menu-level-2 {
						@include media-constructor(left, extend-constructor('calc(100% + ',$submenu-padding,')'));
						@include media-constructor(top, extend-constructor('calc(0% - ',$submenu-padding,')'));
					
						bottom: auto;
					
						@if $submenu-direction == "animation_top" {
							top: auto;
						
							@include media-constructor(bottom, extend-constructor('calc(0% - ',$submenu-padding,')'));
						}
					}
				
					&:hover > .sub > ul,
					> .sub > ul:hover {
						visibility: visible;
						opacity: 1;
						transform: translate3d(0,0,0);
						pointer-events: all;
					}
				}
			}
		
			// horizontal Setting
			@if $submenu-horizontal == "menu_orientation_row" and not $menu-trigger-fullscreen {
				.menu-sub {
					position: static;
				
					> div.sub {
						> ul {
							@if $submenu-horizontal-align == "flex_start_menu" { justify-content: flex-start; }
							@else if $submenu-horizontal-align == "center_menu" { justify-content: center; }
							@else if $submenu-horizontal-align == "flex_end_menu" { justify-content: flex-end; }
							@else if $submenu-horizontal-align == "space_around_menu" { justify-content: space-around; }
							@else if $submenu-horizontal-align == "space_between_menu" { justify-content: space-between; }
						
							pointer-events: all;
							transition-delay: 0.1s;
						}
					
						> .menu-level-1 {
							width: $menu-breakpoint-min;
						
							li {
								width: auto;
								position: relative;
								min-width: auto;
							
								&:not(:first-child) { margin: 0 0 0 $submenu-margin-lg; }
							}
						}
					
						> .menu-level-2 {
							@include media-constructor(top, extend-constructor('calc(100% + ',$submenu-padding,')'));
						
							width: $submenu-min-width;
							flex-direction: column;
							transform: translateX(-50%) !important;
							left: 50%;
						
							li:not(:first-child) { margin: $submenu-margin-lg 0 0 0; }
						
							@if $submenu-direction == "animation_top" {
								top: auto;
							
								@include media-constructor(bottom, extend-constructor('calc(100% + ',$submenu-padding,')'));
							}
						}
					}
				}
			}
		}
	
		//Media hover doesn't work on IE 
		@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) and (min-width: $menu-breakpoint-min) {
			@if not $menu-trigger-fullscreen {
				.menu-sub {
					position: relative;
				
					.menu-level-1,
					.menu-level-2 {
						visibility: hidden;
						opacity: 0;
						position: absolute;
						z-index: 5;
						flex-wrap: wrap;
						transition: $transition-base;
						left: 0;
					
						@if $submenu-direction == "animation_top" {
							top: auto;
							bottom: 100%;
						}
					
						@else  {
							bottom: auto;
							top: 100%;
						}
					
						$x: 0;
						$y: 0;
					
						@if $submenu-animation == "animation_right" {
							$x: -100%;
						}
						@if $submenu-animation == "animation_left" {
							$x: 100%;
						}
						@if $submenu-animation == "animation_top" {
							$y: -100%;
						}
						@if $submenu-animation == "animation_bottom" {
							$y: 100%;
						}
					
						transform: translate3d($x,$y,0);
						transition: all $submenu-animation-duration cubic-bezier(0.16, 0, 0.28, 0.99);
					
						@if $submenu-horizontal == "menu_orientation_column" {
							flex-direction: column;
						
							li:not(:first-child) { margin: $submenu-margin-lg 0 0 0; }
						}
					}
				
					//Submenu Level-2 position
					.menu-level-2 {
						@include media-constructor(left, extend-constructor('calc(100% + ',$submenu-padding,')'));
						@include media-constructor(top, extend-constructor('calc(0% - ',$submenu-padding,')'));
					
						bottom: auto;
					
						@if $submenu-direction == "animation_top" {
							top: auto;
						
							@include media-constructor(bottom, extend-constructor('calc(0% - ',$submenu-padding,')'));
						}
					}
				
					&:hover > .sub > ul,
					> .sub > ul:hover {
						visibility: visible;
						opacity: 1;
						transform: translate3d(0,0,0);
						pointer-events: all;
					}
				}
			}
		
			// horizontal Setting
			@if $submenu-horizontal == "menu_orientation_row" and not $menu-trigger-fullscreen {
				.menu-sub {
					position: static;
				
					> div.sub {
						> ul {
							@if $submenu-horizontal-align == "flex_start_menu" { justify-content: flex-start; }
							@else if $submenu-horizontal-align == "center_menu" { justify-content: center; }
							@else if $submenu-horizontal-align == "flex_end_menu" { justify-content: flex-end; }
							@else if $submenu-horizontal-align == "space_around_menu" { justify-content: space-around; }
							@else if $submenu-horizontal-align == "space_between_menu" { justify-content: space-between; }
						
							pointer-events: all;
							transition-delay: 0.1s;
						}
					
						> .menu-level-1 {
							width: $menu-breakpoint-min;
						
							li {
								width: auto;
								position: relative;
								min-width: auto;
							
								&:not(:first-child) { margin: 0 0 0 $submenu-margin-lg; }
							}
						}
					
						> .menu-level-2 {
							@include media-constructor(top, extend-constructor('calc(100% + ',$submenu-padding,')'));
						
							width: $submenu-min-width;
							flex-direction: column;
							transform: translateX(-50%) !important;
							left: 50%;
						
							li:not(:first-child) { margin: $submenu-margin-lg 0 0 0; }
						
							@if $submenu-direction == "animation_top" {
								top: auto;
							
								@include media-constructor(bottom, extend-constructor('calc(100% + ',$submenu-padding,')'));
							}
						}
					}
				}
			}
		}
	}

	/**
							* Sticky
							* 
							* All Settings for Sticky
							*
							*/
	// Interplays with JS, which adds "sticky" class below-the-fold 
	@if $menu-wrapper-sticky != 'sticky_none' {
		// Fill is necessary for JS
		fill: map-get((sticky_banner : #f00, sticky_menu : #0f0, sticky_instant : #00f, sticky_reverse : #fff), $menu-wrapper-sticky);
		// Fixes jumping content if the menu is nested in a container with limit width
		.wv-boxed > .inner > &.sticky > .inner {
			@include media-constructor-menu(
				max-width, 
				$menu-breakpoint-max, 
				extend-constructor("calc(",$content-width," -"), extend-constructor("",$spacer , " * 2)")
			);
		}
	
		//set animation on sticky menu
		body:not(.open-menu) & {
			@if $sticky-animation == true and $menu-wrapper-sticky == "sticky_reverse" {
				transition: none;
			
				&.sticky { animation: $transition-duration ease-in-out 0s 1 slideDown; }
			}
		
			@else if $sticky-animation == true and $menu-wrapper-sticky == "sticky_banner" {
				transition: none;
			
				&.sticky { animation: $transition-duration ease-in-out 0s 1 fadeIn; }
			}
		
			@else if $sticky-animation == true { transition: $transition-base; }
			@else  { transition: none; }
		}
	
		//sticky setup
		&.sticky {
			position: fixed;
			width: 100%;
			top: 0;
			left: 0;
			z-index: 4;
		
			@include media-constructor-menu(
				box-shadow, 
				$menu-breakpoint-max, 
				$menu-wrapper-shadow
			);
		
			// sticky_instant should have menu styles - no sticky styles
			@if $menu-wrapper-sticky != "sticky_instant" {
				@include preset-headline-color($menu-wrapper-background-sticky-check);
			
				@if type-of($menu-wrapper-sticky-background) == color or $menu-wrapper-sticky-background == none { background: $menu-wrapper-background-sticky-check; }
				@else  { background: $menu-wrapper-sticky-background; }
			
				@media screen and (min-width: $menu-breakpoint-min) {
					body:not(.open-menu) & .ed-menu {
						> ul > li {
							a { color: $menu-color-sticky; }
						
							&:hover > a,
							> a.active { color: $menu-color-active-sticky-contrast; }
						
							@include button-hover-style-border-radius(
								$padding: $menu-padding-lg, 
								$font-size: $menu-link-fz-lg, 
								$hover-style: $hover-style, 
								$color: $menu-color-sticky, 
								$color-active: $menu-color-active-sticky, 
								$hover-border-size: $hover-border-size-lg, 
								$hover-border-radius: $hover-border-radius-lg, 
								$selector: '> a', 
								$selector-hover: '&:hover > a, 
								> a.active'
							);
						}
					
						//  Link styles Submenu sticky
						.menu-sub {
							position: relative;
						
							.menu-level-1,
							.menu-level-2 {
								top: 100%;
								bottom: auto;
							
								@if type-of($submenu-background-sticky) == color or $submenu-background-sticky == none { background: $submenu-background-sticky-check; }
								@else  { background: $submenu-background-sticky; }
							
								a { color: $submenu-color-sticky; }
							
								> li {
									&:hover > a,
									> a.active { color: $submenu-color-active-sticky-contrast; }
								
									@include button-hover-style-border-radius(
										$padding: $submenu-link-padding-lg, 
										$font-size: $submenu-link-fz-lg, 
										$hover-style: $submenu-hover-style, 
										$color: $submenu-color-sticky, 
										$color-active: $submenu-color-active-sticky, 
										$hover-border-size: $submenu-hover-border-size-lg, 
										$hover-border-radius: $submenu-hover-border-radius-lg, 
										$selector: '> a', 
										$selector-hover: '&:hover > a, 
										> a.active'
									);
								}
							}
						
							//Submenu Level-2 position
							.menu-level-2 {
								@include media-constructor(top, extend-constructor('calc(0% - ',$submenu-padding,')'));
							
								bottom: auto;
							}
						
							@if $submenu-horizontal == "menu_orientation_row" {
								position: static;
							
								> div.sub	> .menu-level-2 {
									@include media-constructor(top, extend-constructor('calc(100% + ',$submenu-padding,')'));
								}
							}
						}
					}
				}
			
				//Link Styles for Sticky in IE: Media hover doesn't work on IE 
				@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) and (min-width: $menu-breakpoint-min) {
					body:not(.open-menu) & .ed-menu {
						> ul > li {
							a { color: $menu-color-sticky; }
						
							&:hover > a,
							> a.active { color: $menu-color-active-sticky-contrast; }
						
							@include button-hover-style-border-radius(
								$padding: $menu-padding-lg, 
								$font-size: $menu-link-fz-lg, 
								$hover-style: $hover-style, 
								$color: $menu-color-sticky, 
								$color-active: $menu-color-active-sticky, 
								$hover-border-size: $hover-border-size-lg, 
								$hover-border-radius: $hover-border-radius-lg, 
								$selector: '> a', 
								$selector-hover: '&:hover > a, 
								> a.active'
							);
						}
					
						// IE-Fix: Color styles Links Submenu sticky
						.menu-sub {
							position: relative;
						
							.menu-level-1,
							.menu-level-2 {
								top: 100%;
								bottom: auto;
							
								@if type-of($submenu-background-sticky) == color or $submenu-background-sticky == none { background: $submenu-background-sticky-check; }
								@else  { background: $submenu-background-sticky; }
							
								a { color: $submenu-color-sticky; }
							
								> li {
									&:hover > a,
									> a.active { color: $submenu-color-active-sticky-contrast; }
								
									@include button-hover-style-border-radius(
										$padding: $submenu-link-padding-lg, 
										$font-size: $submenu-link-fz-lg, 
										$hover-style: $submenu-hover-style, 
										$color: $submenu-color-sticky, 
										$color-active: $submenu-color-active-sticky, 
										$hover-border-size: $submenu-hover-border-size-lg, 
										$hover-border-radius: $submenu-hover-border-radius-lg, 
										$selector: '> a', 
										$selector-hover: '&:hover > a, 
										> a.active'
									);
								}
							}
						
							//Submenu Level-2 position
							.menu-level-2 {
								@include media-constructor(top, extend-constructor('calc(0% - ',$submenu-padding,')'));
							
								bottom: auto;
							}
						
							@if $submenu-horizontal == "menu_orientation_row" {
								position: static;
							
								> div.sub	> .menu-level-2 {
									@include media-constructor(top, extend-constructor('calc(100% + ',$submenu-padding,')'));
								}
							}
						}
					}
				}
			
				//Logo Top Sticky 
				@if not $menu-trigger-fullscreen {
					@media screen and (min-width: $menu-breakpoint-min) {
						@if $logo-position == "top" {
							.ed-image,
							.logo {
								opacity: 0;
								visibility: hidden;
								// Necessary to hide logo
								display: none !important;
								padding: 0;
								margin: 0;
							}
						
							@if $menu-logo-width == "wide" {
								>.inner {
									margin: 0;
									flex-basis: 100%;
									max-width: 100%;
									min-width: 100%;
								}
							}
							@else  {
								>.inner {
									margin: 0 auto;
									flex-basis: auto;
									max-width: $content-width;
									min-width: auto;
								}
							}
						}
					
						@else  {
							.ed-image,
							.logo {
								flex-basis: auto !important;
								padding: 0px;
							}
						}
					}
				}
			
				//Sticky Logo Size Change 
				.ed-image,
				.logo img,
				.ed-image img {
					// the element settings must be overwritten for Sticky mode, so an important is necessary.
					@if type-of(nth($logo-width-sticky-lg,1)) == number and strip-units(nth($logo-width-sticky-lg,1)) != 0 {
						width: $logo-width-sticky-lg !important;
						height: auto !important;
					}
				
					// can't set stripe-units directly after @if, therefore double query
					@else if type-of(nth($logo-width-sticky-lg,1)) == number and strip-units(nth($logo-width-sticky-lg,1)) == 0 {
						height: 0;
						width: 0;
					}
				
					@if type-of(nth($logo-width-sticky-md,1)) == number and strip-units(nth($logo-width-sticky-md,1)) != 0 {
						@media screen and (max-width: $breakpoint-md-max) {
							width: $logo-width-sticky-md !important;
							height: auto !important;
						}
					}
				
					@else if type-of(nth($logo-width-sticky-md,1)) == number and strip-units(nth($logo-width-sticky-md,1)) == 0 {
						height: 0;
						width: 0;
					}
				
					@if type-of(nth($logo-width-sticky-xs,1)) == number and strip-units(nth($logo-width-sticky-xs,1)) != 0 {
						@media screen and (max-width: $breakpoint-xs-max) {
							width: $logo-width-sticky-xs !important;
							height: auto !important;
						}
					}
				
					@else if type-of(nth($logo-width-sticky-xs,1)) == number and strip-units(nth($logo-width-sticky-xs,1)) == 0 {
						height: 0;
						width: 0;
					}
				}
			
				// Mobile Trigger Style Sticky
				.mobile-cont > .inner > .ed-element.ed-icon svg { fill: $menu-trigger-color-sticky; }
			
				.menu-trigger {
					border-color: $menu-trigger-border-color-sticky;
				
					.menu-trigger-box {
						&:before { color: $menu-trigger-color-sticky; }
					
						@if $menu-trigger-boxed {
							background: $menu-trigger-boxed-color-sticky;
							border-color: $menu-trigger-boxed-color-sticky;
						}
					
						.menu-trigger-inner {
							&,
							&:before,
							&:after { background: $menu-trigger-color-sticky; }
						}
					}
				}
			}
		}
	}

	/**
							* Hide Trigger
							* 
							* Hide Mobile Content if trigger is not set
							*
							*/
	@if not $menu-trigger-fullscreen {
		@media screen and (min-width: $menu-breakpoint-min) {
			.mobile-cont { display: none; }
		}
	
		//Media hover doesn't work on IE 
		@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) and (min-width: $menu-breakpoint-min) {
			.mobile-cont { display: none; }
		}
	}

	/**
							* Mobile
							*
							*/
	.mobile-cont {
		> .inner {
			> .ed-element {
				flex-basis: auto;
			
				&.ed-icon {
					text-align: center;
				
					a { display: block; }
				
					svg {
						fill: $menu-trigger-color;
					
						@include media-constructor-menu(
							width, 
							$menu-breakpoint-max, 
							extend-constructor("calc(",$menu-trigger-bar-spacing," * 2 +"), extend-constructor("",$menu-trigger-bar-height ," * 3)")
						);
						@include media-constructor-menu(
							height, 
							$menu-breakpoint-max, 
							extend-constructor("calc(",$menu-trigger-bar-spacing," * 2 +"), extend-constructor("",$menu-trigger-bar-height ," * 3)")
						);
					
						display: block;
					}
				
					@media screen and (min-width: $menu-breakpoint-min) {
						display: none;
					}
				
					//Icons are overlapped, therefore hidden
					@media screen and (max-width: $menu-breakpoint-max) {
						@if $menu-trigger-fixed { display: none; }
					}
				
					//Media hover doesn't work on IE 
					@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) and (min-width: $menu-breakpoint-min) {
						display: none;
					}
				}
			}
		}
	}

	/**
						    * Menu Trigger
							*
							*/
	.menu-trigger {
		@include media-constructor-menu(
			border-width, 
			$menu-breakpoint-max, 
			$menu-trigger-border-width
		);
	
		border: {
			style: $menu-trigger-border-style;
			color: $menu-trigger-border-color;
		}
	
		@include media-constructor-menu(
			border-radius, 
			$menu-breakpoint-max, 
			$menu-trigger-border-radius
		);
	
		transition: $transition-base;
		transition-property: opacity;
		opacity: 1;
		z-index: 101;
		cursor: pointer;
		position: relative;
		line-height: 0;
	
		@if $menu-trigger-boxed == false and nth($menu-trigger-border-width-lg,1) > 0 { padding: $menu-trigger-padding-lg; }
	
		@media screen and (max-width: $menu-breakpoint-max) {
			@if $menu-trigger-boxed == false and nth($menu-trigger-border-width-md,1) > 0 { padding: $menu-trigger-padding-md; }
		}
		@media screen and (max-width: $breakpoint-xs-max) {
			@if $menu-trigger-boxed == false and nth($menu-trigger-border-width-xs,1) > 0 { padding: $menu-trigger-padding-xs; }
		}
	
		.menu-trigger-box {
			@include media-constructor-menu(
				width, 
				$menu-breakpoint-max, 
				$menu-trigger-width
			);
			@include media-constructor-menu(
				height, 
				$menu-breakpoint-max, 
				extend-constructor("calc(",$menu-trigger-bar-spacing," * 2 +"), extend-constructor("",$menu-trigger-bar-height ," * 3)")
			);
		
			//necessary because scaleX must be manipulated in some trigger variants
			transform: scale(1);
			display: inline-block;
			position: relative;
		
			@if $menu-trigger-description {
				&:before {
					content: "#{$menu-trigger-description-name}";
				
					@include media-constructor-menu(
						font-size, 
						$menu-breakpoint-max, 
						$menu-trigger-description-fz
					);
				
					text-transform: uppercase;
					color: $menu-trigger-color;
					line-height: 1;
					white-space: nowrap;
				}
			
				@if $menu-trigger-description-only {
					width: auto;
					height: auto;
					// Overwrites Flip styles
					transform: scaleX(1) !important;
				}
			
				@else  {
					&:before {
						left: 50%;
						transform: translateX(-50%);
						position: absolute;
					}
				
					@if $menu-trigger-description-position == "vertical_top" {
						@include media-constructor-menu(
							margin-top, 
							$menu-breakpoint-max, 
							extend-constructor("calc(",$menu-trigger-description-fz," +"), extend-constructor("(((",$menu-trigger-bar-spacing," * 2 +"), extend-constructor("",$menu-trigger-bar-height ," * 3) -"), extend-constructor("",$menu-trigger-bar-height , " * 3) / 2))")
						);
					
						&:before {
							@include media-constructor-menu(
								top, 
								$menu-breakpoint-max, 
								extend-constructor("calc(",$menu-trigger-description-fz," * -1 +"), extend-constructor("(((",$menu-trigger-bar-spacing," * 2 +"), extend-constructor("",$menu-trigger-bar-height ," * 3) -"), extend-constructor("",$menu-trigger-bar-height , " * 3) /-2))")
							);
						}
					}
				
					@if $menu-trigger-description-position == "vertical_bottom" {
						@include media-constructor-menu(
							margin-bottom, 
							$menu-breakpoint-max, 
							extend-constructor("calc(",$menu-trigger-description-fz," +"), extend-constructor("(((",$menu-trigger-bar-spacing," * 2 +"), extend-constructor("",$menu-trigger-bar-height ," * 3) -"), extend-constructor("",$menu-trigger-bar-height , " * 3) / 2))")
						);
					
						&:before {
							@include media-constructor-menu(
								bottom, 
								$menu-breakpoint-max, 
								extend-constructor("calc(",$menu-trigger-description-fz," * -1 +"), extend-constructor("(((",$menu-trigger-bar-spacing," * 2 +"), extend-constructor("",$menu-trigger-bar-height ," * 3) -"), extend-constructor("",$menu-trigger-bar-height , " * 3) /-2))")
							);
						}
					}
				}
			}
		
			@if not $menu-trigger-fullscreen {
				@media screen and (min-width: $menu-breakpoint-min) {
					visibility: hidden;
					display: none;
				}
			
				//Media hover doesn't work on IE 
				@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) and (min-width: $menu-breakpoint-min) {
					visibility: hidden;
					display: none;
				}
			}
		
			@if $menu-trigger-flip == "flip_horizontal" {
				transform: scaleX(-1);
			
				&:before { transform: scaleX(-1) translateX(50%); }
			}
		
			@else if $menu-trigger-flip == "flip_vertical" {
				transform: scaleY(-1);
			
				&:before { transform: scaleY(-1) translateX(-50%); }
			
				@if $menu-trigger-description and $menu-trigger-description-only == false {
					@if $menu-trigger-description-position == "vertical_top" {
						margin-top: 0;
					
						@include media-constructor-menu(
							margin-bottom, 
							$menu-breakpoint-max, 
							extend-constructor("calc(",$menu-trigger-description-fz," +"), extend-constructor("(((",$menu-trigger-bar-spacing," * 2 +"), extend-constructor("",$menu-trigger-bar-height ," * 3) -"), extend-constructor("",$menu-trigger-bar-height , " * 3) / 2))")
						);
					}
				
					@if $menu-trigger-description-position == "vertical_bottom" {
						margin-bottom: 0;
					
						@include media-constructor-menu(
							margin-top, 
							$menu-breakpoint-max, 
							extend-constructor("calc(",$menu-trigger-description-fz," +"), extend-constructor("(((",$menu-trigger-bar-spacing," * 2 +"), extend-constructor("",$menu-trigger-bar-height ," * 3) -"), extend-constructor("",$menu-trigger-bar-height , " * 3) / 2))")
						);
					}
				}
			}
		
			@else if $menu-trigger-flip == "flip_horizontal-vertical" {
				transform: scale(-1, -1);
			
				&:before { transform: scale(-1, -1) translateX(50%); }
			
				@if $menu-trigger-description and $menu-trigger-description-only == false {
					@if $menu-trigger-description-position == "vertical_top" {
						margin-top: 0;
					
						@include media-constructor-menu(
							margin-bottom, 
							$menu-breakpoint-max, 
							extend-constructor("calc(",$menu-trigger-description-fz," +"), extend-constructor("(((",$menu-trigger-bar-spacing," * 2 +"), extend-constructor("",$menu-trigger-bar-height ," * 3) -"), extend-constructor("",$menu-trigger-bar-height , " * 3) / 2))")
						);
					}
				
					@if $menu-trigger-description-position == "vertical_bottom" {
						margin-bottom: 0;
					
						@include media-constructor-menu(
							margin-top, 
							$menu-breakpoint-max, 
							extend-constructor("calc(",$menu-trigger-description-fz," +"), extend-constructor("(((",$menu-trigger-bar-spacing," * 2 +"), extend-constructor("",$menu-trigger-bar-height ," * 3) -"), extend-constructor("",$menu-trigger-bar-height , " * 3) / 2))")
						);
					}
				}
			}
		
			.menu-trigger-inner {
				top: 50%;
				display: block;
			
				@include media-constructor-menu(
					margin-top, 
					$menu-breakpoint-max, 
					extend-constructor("calc(", $menu-trigger-bar-height, " / -2)")
				);
			
				@if $menu-trigger-description-only and $menu-trigger-description { display: none; }
			
				&,
				&:before,
				&:after {
					@include media-constructor-menu(
						width, 
						$menu-breakpoint-max, 
						$menu-trigger-width
					);
					@include media-constructor-menu(
						height, 
						$menu-breakpoint-max, 
						$menu-trigger-bar-height
					);
					@include media-constructor-menu(
						border-radius, 
						$menu-breakpoint-max, 
						$menu-trigger-bar-radius
					);
				
					background-color: $menu-trigger-color;
					position: absolute;
					transition-property: transform,
						width,
						margin-left;
					transition-duration: $menu-trigger-animation-duration;
					transition-timing-function: ease;
				}
			
				&:before,
				&:after {
					content: "";
					display: block;
				}
			
				&:before {
					@include media-constructor-menu(
						top, 
						$menu-breakpoint-max, 
						extend-constructor("calc((",$menu-trigger-bar-spacing," +"), extend-constructor("",$menu-trigger-bar-height , ") * -1)")
					);
				}
				&:after {
					@include media-constructor-menu(
						bottom, 
						$menu-breakpoint-max, 
						extend-constructor("calc((",$menu-trigger-bar-spacing," +"), extend-constructor("",$menu-trigger-bar-height , ") * -1)")
					);
				}
			
				@if $menu-trigger-animation == "default" {
					@include media-constructor-menu(
						top, 
						$menu-breakpoint-max, 
						extend-constructor("calc(", $menu-trigger-bar-height, " / 2)")
					);
				
					&:before {
						@include media-constructor-menu(
							top, 
							$menu-breakpoint-max, 
							extend-constructor("calc(",$menu-trigger-bar-height," +"), extend-constructor("",$menu-trigger-bar-spacing , ")")
						);
					
						transition-property: transform,
							opacity,
							width,
							margin-left;
						transition-timing-function: ease;
						transition-duration: 0.15s;
					}
				
					&:after {
						@include media-constructor-menu(
							top, 
							$menu-breakpoint-max, 
							extend-constructor("calc(",$menu-trigger-bar-height," * 2 +"), extend-constructor("",$menu-trigger-bar-spacing , " * 2)")
						);
					}
				}
			
				@if $menu-trigger-animation == "squeeze" {
					transition-duration: 0.075s;
					transition-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
				
					&:before { transition: top 0.075s 0.12s ease, opacity 0.075s ease; }
					&:after { transition: bottom 0.075s 0.12s ease, transform 0.075s cubic-bezier(0.55, 0.055, 0.675, 0.19); }
				}
			
				@if $menu-trigger-animation == "rotate" {
					transition-duration: 0.22s;
					transition-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
				
					&:before { transition: top 0.1s 0.25s ease-in, opacity 0.1s ease-in; }
					&:after { transition: bottom 0.1s 0.25s ease-in, transform 0.22s cubic-bezier(0.55, 0.055, 0.675, 0.19); }
				}
			
				@if $menu-trigger-animation == "rotate-fast" {
					transition-duration: 0.2s;
					transition-timing-function: cubic-bezier(0.19, 1, 0.22, 1);
				
					&:before,
					&:after {
						transition-duration: 0s;
						transition-delay: 0.1s;
						transition-timing-function: linear;
					}
				
					&:before { transition-property: top, opacity; }
					&:after { transition-property: bottom, transform; }
				}
			
				@if $menu-trigger-animation == "collapse-down" {
					top: auto;
					bottom: 0;
					transition-duration: 0.13s;
					transition-delay: 0.13s;
					transition-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
				
					&:after {
						@include media-constructor-menu(
							top, 
							$menu-breakpoint-max, 
							extend-constructor("calc((",$menu-trigger-bar-spacing," * 2 +"), extend-constructor("",$menu-trigger-bar-height, " * 2) * -1)")
						);
					
						transition: top 0.2s 0.2s cubic-bezier(0.33333, 0.66667, 0.66667, 1), opacity 0.1s linear;
					}
				
					&:before { transition: top 0.12s 0.2s cubic-bezier(0.33333, 0.66667, 0.66667, 1), transform 0.13s cubic-bezier(0.55, 0.055, 0.675, 0.19); }
				}
			
				@if $menu-trigger-animation == "turn" {
					transition: transform 0.075s 0.15s cubic-bezier(0.55, 0.055, 0.675, 0.19), background-color 0s 0.075s linear;
				
					&:before { transition: top 0.075s 0.075s ease-in, transform 0.075s 0s cubic-bezier(0.55, 0.055, 0.675, 0.19); }
					&:after { transition: bottom 0.075s 0.075s ease-in, transform 0.075s 0s cubic-bezier(0.55, 0.055, 0.675, 0.19); }
				}
			
				@if $menu-trigger-animation == "minus" {
					&:before,
					&:after { transition: bottom 0.08s 0s ease-out,
						top 0.08s 0s ease-out,
						opacity 0s linear; }
				}
			}
		}
	
		body:not(.open-menu) & .menu-trigger-box {
			@if $menu-trigger-style == "steps" {
				@if $menu-trigger-animation == "default" or $menu-trigger-animation == "elastic" or $menu-trigger-animation == "collapse-down" {
					.menu-trigger-inner {
						width: 50%;
					
						&:before { width: 150%; }
					}
				
					&:hover .menu-trigger-inner {
						&,
						&:before { width: 100%; }
					}
				}
			
				@else  {
					.menu-trigger-inner {
						width: 75%;
					
						&:before { width: 75%; }
					}
				
					&:hover .menu-trigger-inner {
						&,
						&:before { width: 100%; }
					}
				}
			}
		
			@if $menu-trigger-style == "steps-centered" {
				@if $menu-trigger-animation == "default" or $menu-trigger-animation == "elastic" or $menu-trigger-animation == "collapse-down" {
					.menu-trigger-inner {
						width: 50%;
						margin-left: 25%;
					
						&:after { margin-left: -50%; }
					
						&:before {
							width: 150%;
							margin-left: -25%;
						}
					}
				
					&:hover .menu-trigger-inner {
						&,
						&:before,
						&:after {
							width: 100%;
							margin-left: 0;
						}
					}
				}
			
				@else  {
					.menu-trigger-inner {
						width: 75%;
						margin-left: 12.5%;
					
						&:before {
							width: 75%;
							margin-left: 12.5%;
						}
					
						&:after { margin-left: -15%; }
					}
				
					&:hover .menu-trigger-inner {
						&,
						&:before,
						&:after {
							width: 100%;
							margin-left: 0;
						}
					}
				}
			}
		
			@else if $menu-trigger-style == "offset-outer-small" {
				@if $menu-trigger-animation == "default" or $menu-trigger-animation == "elastic" or $menu-trigger-animation == "collapse-down" {
					.menu-trigger-inner {
						width: 65%;
					
						&:before {
							width: 35%;
							margin-left: 60%;
						}
					
						&:after {
							width: 100%;
							margin-left: 55%;
						}
					}
				
					&:hover .menu-trigger-inner {
						&,
						&:before,
						&:after {
							width: 100%;
							margin-left: 0;
						}
					}
				}
			
				@else  {
					.menu-trigger-inner {
						width: 25%;
						margin-left: 35%;
					
						&:before {
							width: 250%;
							margin-left: -145%;
						}
					
						&:after { width: 250%; }
					}
				
					&:hover .menu-trigger-inner {
						&,
						&:before,
						&:after {
							width: 100%;
							margin-left: 0;
						}
					}
				}
			}
		
			@else if $menu-trigger-style == "offset-outer-large" {
				@if $menu-trigger-animation == "default" or $menu-trigger-animation == "elastic" or $menu-trigger-animation == "collapse-down" {
					.menu-trigger-inner {
						width: 50%;
					
						&:before { width: 200%; }
					
						&:after {
							width: 100%;
							margin-left: 100%;
						}
					}
				
					&:hover .menu-trigger-inner {
						&,
						&:before,
						&:after {
							width: 100%;
							margin-left: 0;
						}
					}
				}
			
				@else  {
					.menu-trigger-inner {
						&:before { width: 50%; }
					
						&:after {
							width: 50%;
							margin-left: 50%;
						}
					}
				
					&:hover .menu-trigger-inner {
						&:before,
						&:after {
							width: 100%;
							margin-left: 0;
						}
					}
				}
			}
		
			@else if $menu-trigger-style == "small-outer" {
				@if $menu-trigger-animation == "default" or $menu-trigger-animation == "elastic" or $menu-trigger-animation == "collapse-down" {
					.menu-trigger-inner {
						width: 50%;
						margin-left: 25%;
					
						&:before { margin-left: -50%; }
						&:after { width: 100%; }
					}
				
					&:hover .menu-trigger-inner {
						&,
						&:before,
						&:after {
							width: 100%;
							margin-left: 0;
						}
					}
				}
			
				@else  {
					.menu-trigger-inner {
						&:before,
						&:after {
							width: 50%;
							margin-left: 25%;
						}
					}
				
					&:hover .menu-trigger-inner {
						&:before,
						&:after {
							width: 100%;
							margin-left: 0;
						}
					}
				}
			}
		
			@else if $menu-trigger-style == "small-inner" {
				@if $menu-trigger-animation == "default" or $menu-trigger-animation == "elastic" or $menu-trigger-animation == "collapse-down" {
					.menu-trigger-inner {
						&:before {
							width: 50%;
							margin-left: 25%;
						}
					}
				
					&:hover .menu-trigger-inner {
						&:before {
							width: 100%;
							margin-left: 0;
						}
					}
				}
			
				@else  {
					.menu-trigger-inner {
						width: 50%;
						margin-left: 25%;
					
						&:before,
						&:after { margin-left: -50%; }
					}
				
					&:hover .menu-trigger-inner {
						&,
						&:before,
						&:after {
							width: 100%;
							margin-left: 0;
						}
					}
				}
			}
		}
	
		@if $menu-trigger-fixed {
			opacity: 1;
			position: fixed;
		
			@if $menu-trigger-position == "flex_end_menu" {
				@include media-constructor-menu(
					right, 
					$menu-breakpoint-max, 
					$menu-trigger-margin
				);
				@include media-constructor-menu(
					top, 
					$menu-breakpoint-max, 
					$menu-trigger-margin
				);
			}
		
			@else if $menu-trigger-position == "flex_start_menu" {
				@include media-constructor-menu(
					left, 
					$menu-breakpoint-max, 
					$menu-trigger-margin
				);
				@include media-constructor-menu(
					top, 
					$menu-breakpoint-max, 
					$menu-trigger-margin
				);
			}
		
			@else if $menu-trigger-position == "center_menu" {
				@include media-constructor-menu(
					top, 
					$menu-breakpoint-max, 
					$menu-trigger-margin
				);
			
				left: 50%;
				transform: translateX(-50%);
			}
		
			z-index: 99;
		}
	
		@if $menu-trigger-boxed {
			.menu-trigger-box {
				background: $menu-trigger-boxed-color;
			
				@include media-constructor-menu(
					height, 
					$menu-breakpoint-max, 
					extend-constructor("calc( 2* ",$menu-trigger-padding," +") ,extend-constructor("",$menu-trigger-bar-spacing," * 2 +"), extend-constructor("",$menu-trigger-bar-height , " * 3)")
				);
				@include media-constructor-menu(
					width, 
					$menu-breakpoint-max, 
					extend-constructor("calc(",$menu-trigger-width," +"), extend-constructor("",$menu-trigger-padding , " * 2)")
				);
				@include media-constructor-menu(
					border-radius, 
					$menu-breakpoint-max, 
					$menu-trigger-border-radius
				);
			
				//Border Setting
				@include media-constructor-menu(
					border-top-width, 
					$menu-breakpoint-max, 
					$menu-trigger-padding
				);
				@include media-constructor-menu(
					border-bottom-width, 
					$menu-breakpoint-max, 
					$menu-trigger-padding
				);
				@include media-constructor-menu(
					border-left-width, 
					$menu-breakpoint-max, 
					$menu-trigger-padding
				);
				@include media-constructor-menu(
					border-right-width, 
					$menu-breakpoint-max, 
					$menu-trigger-padding
				);
			
				border: {
					style: solid;
					color: $menu-trigger-boxed-color;
				}
			
				@if $menu-trigger-description {
					margin-top: 0;
					margin-bottom: 0;
				
					&:before { display: none; }
				}
			}
		}
	
		@media screen and (max-width: $menu-breakpoint-max) {
			.menu-trigger-box {
				@if $menu-trigger-flip == "flip_horizontal" { transform: scaleX(-1); }
				@else if $menu-trigger-flip == "flip_vertical" { transform: scaleY(-1); }
				@else if $menu-trigger-flip == "flip_horizontal-vertical" { transform: scale(-1, -1); }
			}
		}
		@media screen and (max-width: $breakpoint-xs-max) {
			.menu-trigger-box {
				@if $menu-trigger-flip == "flip_horizontal" { transform: scaleX(-1); }
				@else if $menu-trigger-flip == "flip_vertical" { transform: scaleY(-1); }
				@else if $menu-trigger-flip == "flip_horizontal-vertical" { transform: scale(-1, -1); }
			}
		}
	}

	// includes the whole behavior for the burger menu while open class is set
	body.open-menu & {
		.ed-menu {
			@media (max-width: $menu-breakpoint-max) {
				transform: translate3d(0, 0, 0);
				pointer-events: auto;
				opacity: 1;
			}
		
			@if $menu-trigger-fullscreen {
				transform: translate3d(0, 0, 0);
				pointer-events: auto;
				opacity: 1;
			}
		
			.menu-sub .menu-level-1,
			.menu-sub .menulevel-2 {
				@if type-of($submenu-background-mobile) == color or $submenu-background-mobile == none { background: $submenu-background-mobile-check; }
				@else  { background: $submenu-background-mobile; }
			}
		}
	
		&.sticky {
			@if $menu-wrapper-sticky != "sticky_instant" and $menu-wrapper-sticky != "sticky_none" {
				.menu-trigger .menu-trigger-box {
					&:before { color: $menu-trigger-color-active; }
					.menu-trigger-inner {
						&,
						&:before,
						&:after { background: $menu-trigger-color-active; }
					}
				}
			}
		}
	
		.menu-trigger {
			border-color: $menu-trigger-border-color-active;
			// Sets trigger open position depending on fixed settings 
			@if $menu-trigger-position-open != "auto" or $menu-trigger-fixed == true {
				opacity: 1;
				position: fixed;
			
				@include media-constructor-menu(
					top, 
					$menu-breakpoint-max, 
					$menu-trigger-margin
				);
			}
		
			@else  {
				@include media-constructor-menu(
					top, 
					$menu-breakpoint-max, 
					auto
				);
			}
		
			@if $menu-trigger-position-open == "flex_end_menu" {
				@include media-constructor-menu(
					right, 
					$menu-breakpoint-max, 
					$menu-trigger-margin
				);
			
				left: auto;
				transform: translateX(0);
				position: fixed;
			}
		
			@else if $menu-trigger-position-open == "flex_start_menu" {
				@include media-constructor-menu(
					left, 
					$menu-breakpoint-max, 
					$menu-trigger-margin
				);
			
				right: auto;
				transform: translateX(0);
				position: fixed;
			}
		
			@else if $menu-trigger-position-open == "center_menu" {
				left: 50%;
				right: auto;
				transform: translateX(-50%);
				position: fixed;
			}
		
			.menu-trigger-box {
				@if $menu-trigger-description {
					&:before {
						color: $menu-trigger-color-active;
						content: "#{$menu-trigger-description-close-name}";
					}
				}
			
				.menu-trigger-inner {
					@if $menu-trigger-animation == "default" {
						@include media-constructor-menu(
							transform, 
							$menu-breakpoint-max, 
							extend-constructor("translate3d(0, calc(",$menu-trigger-bar-spacing," +"),	extend-constructor("",$menu-trigger-bar-height , "), 0) rotate(45deg)")
						);
					
						&:before {
							@include media-constructor-menu(
								transform, 
								$menu-breakpoint-max, 
								extend-constructor("rotate(-45deg) translate3d(calc(",$menu-trigger-width," / -7),"), extend-constructor("calc(",$menu-trigger-bar-spacing , " * -1), 0)")
							);
						
							opacity: 0;
						}
					
						&:after {
							@include media-constructor-menu(
								transform, 
								$menu-breakpoint-max, 
								extend-constructor("translate3d(0, calc((",$menu-trigger-bar-spacing," +"), extend-constructor("",$menu-trigger-bar-height , ") * -2), 0) rotate(-90deg)")
							);
						}
					}
				
					@if $menu-trigger-animation == "squeeze" {
						transform: rotate(45deg);
						transition-delay: 0.12s;
						transition-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
					
						&:before {
							top: 0;
							opacity: 0;
							transition: top 0.075s ease, opacity 0.075s 0.12s ease;
						}
					
						&:after {
							bottom: 0;
							transform: rotate(-90deg);
							transition: bottom 0.075s ease, transform 0.075s 0.12s cubic-bezier(0.215, 0.61, 0.355, 1);
						}
					}
				
					@if $menu-trigger-animation == "rotate" {
						transform: rotate(225deg);
						transition-delay: 0.12s;
						transition-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
					
						&:before {
							top: 0;
							opacity: 0;
							transition: top 0.1s ease-out, opacity 0.1s 0.12s ease-out;
						}
					
						&:after {
							bottom: 0;
							transform: rotate(-90deg);
							transition: bottom 0.1s ease-out, transform 0.22s 0.12s cubic-bezier(0.215, 0.61, 0.355, 1);
						}
					}
				
					@if $menu-trigger-animation == "rotate-fast" {
						transform: rotate(765deg);
						transition-timing-function: cubic-bezier(0.19, 1, 0.22, 1);
					
						&:before,
						&:after { transition-delay: 0s; }
					
						&:before {
							top: 0;
							opacity: 0;
						}
					
						&:after {
							bottom: 0;
							transform: rotate(90deg);
						}
					}
				
					@if $menu-trigger-animation == "collapse-down" {
						@include media-constructor-menu(
							transform, 
							$menu-breakpoint-max, 
							extend-constructor("translate3d(0, calc((",$menu-trigger-bar-spacing," +"), extend-constructor("",$menu-trigger-bar-height , ") * -1), 0) rotate(-45deg)")
						);
					
						transition-delay: 0.22s;
						transition-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
					
						&:after {
							top: 0;
							opacity: 0;
							transition: top 0.2s cubic-bezier(0.33333, 0, 0.66667, 0.33333), opacity 0.1s 0.22s linear;
						}
					
						&:before {
							top: 0;
							transform: rotate(-90deg);
							transition: top 0.1s 0.16s cubic-bezier(0.33333, 0, 0.66667, 0.33333), transform 0.13s 0.25s cubic-bezier(0.215, 0.61, 0.355, 1);
						}
					}
				
					@if $menu-trigger-animation == "turn" {
						transform: rotate(90deg);
						background-color: transparent !important;
						transition: transform 0.075s 0s cubic-bezier(0.215, 0.61, 0.355, 1), background-color 0s 0.15s linear;
					
						&:before {
							top: 0;
							transform: rotate(-45deg);
							transition: top 0.075s 0.1s ease-out, transform 0.075s 0.15s cubic-bezier(0.215, 0.61, 0.355, 1);
						}
					
						&:after {
							bottom: 0;
							transform: rotate(45deg);
							transition: bottom 0.075s 0.1s ease-out, transform 0.075s 0.15s cubic-bezier(0.215, 0.61, 0.355, 1);
						}
					}
				
					@if $menu-trigger-animation == "minus" {
						&:before,
						&:after {
							opacity: 0;
							transition: bottom 0.08s ease-out,
								top 0.08s ease-out,
								opacity 0s 0.08s linear;
						}
					
						&:before { top: 0; }
						&:after { bottom: 0; }
					}
				
					&,
					&:before,
					&:after {
						background: $menu-trigger-color-active;
						box-shadow: none;
					}
				}
			}
		
			@if $menu-trigger-boxed {
				.menu-trigger-box {
					background: $menu-trigger-boxed-color-active;
					border-color: $menu-trigger-boxed-color-active;
				}
			}
		}
	}
}

// Media query constructor specifically for the menu with the extra breakpoint
@mixin media-constructor-menu(
	$property, 
	$breakpoint, 
	$values...
) {
	// Initialize variables
	$desktop: ();
	$tablet: ();
	$mobile: ();

	// Check if not a single nested list like $example: (1 2 3 4); // The nth() is important because apparently in Sass arglists are nested lists
	@if length(nth($values, 1)) < 4 {
		// Go through values in list and assign each to a breakpoint. // Tablet and mobile will receive a downward compatible value // if none are given initially.
		@each $value in $values {
			$desktop: append($desktop, nth($value, 1));
			$tablet: append($tablet, nth(inherit-list($value), 2));
			$mobile: append($mobile, nth(inherit-list($value), 3));
		}
	
		// Return desktop value
		#{$property}: $desktop;
		// Return tablet value if it's not the same as desktop
		@if $tablet !=$desktop {
			@media screen and (max-width: $breakpoint) {
				#{$property}: $tablet;
			}
		}
	
		// Return mobile value if it's not the same as tablet
		@if $mobile !=$tablet {
			@media screen and (max-width: $breakpoint-xs-max) {
				#{$property}: $mobile;
			}
		}
	}

	// Return if a single nested list like $example: (1 2 3 4)
	@else  { #{$property}: $values; }
}

@mixin button-hover-style-border-radius(
	$padding: $spacer, 
	$font-size: $fz-base-all, 
	$hover-style: hover_box_fade, 
	$color: $color-default, 
	$color-active: $color-primary, 
	$hover-border-size: 1px, 
	$hover-border-radius: 0px, 
	$selector: '&', 
	$selector-hover: '&:hover, 
	&.active'
) {
	#{$selector} {
		padding: $padding;
	
		@include media-constructor(font-size, $font-size);
	}

	@if $hover-style != "hover_none" and $hover-style != "hover_text_color" and $hover-style != "hover_box_fade" {
		#{$selector} {
			&:before,
			&:after {
				content: '';
				position: absolute;
				display: block;
				z-index: -1;
				transition: all .3s ease;
			
				@if type-of($color-active) == color { background: $color-active; }
				@else  { background: $color; }
			}
		}
	}
	@if $hover-style == "hover_none" {
		#{$selector-hover} { color: $color; }
	}
	@if $hover-style == "hover_text_color" {
		#{$selector-hover} {
			@if type-of($color-active) == color { color: $color-active; }
			@else  { color: $color; }
		}
	}

	@if $hover-style == "hover_box_fade" {
		#{$selector} {
			@if length(nth($hover-border-radius, 1)) == 4 {
				@if nth(nth($hover-border-radius, 1), 1) > 0 or  nth(nth($hover-border-radius, 1),2) > 0 or nth(nth($hover-border-radius, 1),3) > 0 or nth(nth($hover-border-radius, 1),4) > 0 {
					border-radius: $hover-border-radius;
					display: block;
					overflow: hidden;
				}
			}
			@else if length(nth($hover-border-radius,1)) == 1 {
				@if nth($hover-border-radius,1) > 0 {
					border-radius: $hover-border-radius;
					display: block;
					overflow: hidden;
				}
			}
		}
	
		#{$selector-hover} {
			@if type-of($color-active) == color { background: $color-active; }
			@else  { background: $color; }
		}
	}

	@if $hover-style == "hover_box_vertical" {
		#{$selector}:after {
			top: 50%;
			left: 50%;
			width: 100%;
			height: 0;
			transform: translate(-50%,-50%);
		
			@if length(nth($hover-border-radius, 1)) == 4 {
				@if nth(nth($hover-border-radius, 1), 1) > 0 or  nth(nth($hover-border-radius, 1),2) > 0 or nth(nth($hover-border-radius, 1),3) > 0 or nth(nth($hover-border-radius, 1),4) > 0 { border-radius: $hover-border-radius; }
			}
			@else if length(nth($hover-border-radius,1)) == 1 {
				@if nth($hover-border-radius,1) > 0 { border-radius: $hover-border-radius; }
			}
		}
	
		#{$selector-hover} {
			&:after { height: 100%; }
		}
	}

	@if $hover-style == "hover_box_horizontal" {
		#{$selector}:after {
			top: 50%;
			left: 50%;
			width: 0;
			height: 100%;
			transform: translate(-50%,-50%);
		
			@if length(nth($hover-border-radius, 1)) == 4 {
				@if nth(nth($hover-border-radius, 1), 1) > 0 or  nth(nth($hover-border-radius, 1),2) > 0 or nth(nth($hover-border-radius, 1),3) > 0 or nth(nth($hover-border-radius, 1),4) > 0 { border-radius: $hover-border-radius; }
			}
			@else if length(nth($hover-border-radius,1)) == 1 {
				@if nth($hover-border-radius,1) > 0 { border-radius: $hover-border-radius; }
			}
		}
	
		#{$selector-hover} {
			&:after { width: 100%; }
		}
	}

	@if $hover-style == "hover_box_top" {
		#{$selector}:after {
			top: 0;
			left: 0;
			width: 100%;
			height: 0;
		
			@if length(nth($hover-border-radius, 1)) == 4 {
				@if nth(nth($hover-border-radius, 1), 1) > 0 or  nth(nth($hover-border-radius, 1),2) > 0 or nth(nth($hover-border-radius, 1),3) > 0 or nth(nth($hover-border-radius, 1),4) > 0 { border-radius: $hover-border-radius; }
			}
			@else if length(nth($hover-border-radius,1)) == 1 {
				@if nth($hover-border-radius,1) > 0 { border-radius: $hover-border-radius; }
			}
		}
	
		#{$selector-hover} {
			&:after { height: 100%; }
		}
	}

	@if $hover-style == "hover_box_bottom" {
		#{$selector}:after {
			bottom: 0;
			left: 0;
			width: 100%;
			height: 0;
		
			@if length(nth($hover-border-radius, 1)) == 4 {
				@if nth(nth($hover-border-radius, 1), 1) > 0 or  nth(nth($hover-border-radius, 1),2) > 0 or nth(nth($hover-border-radius, 1),3) > 0 or nth(nth($hover-border-radius, 1),4) > 0 { border-radius: $hover-border-radius; }
			}
			@else if length(nth($hover-border-radius,1)) == 1 {
				@if nth($hover-border-radius,1) > 0 { border-radius: $hover-border-radius; }
			}
		}
	
		#{$selector-hover} {
			&:after { height: 100%; }
		}
	}

	@if $hover-style == "hover_box_left" {
		#{$selector}:after {
			top: 0;
			left: 0;
			height: 100%;
			width: 0;
		
			@if length(nth($hover-border-radius, 1)) == 4 {
				@if nth(nth($hover-border-radius, 1), 1) > 0 or  nth(nth($hover-border-radius, 1),2) > 0 or nth(nth($hover-border-radius, 1),3) > 0 or nth(nth($hover-border-radius, 1),4) > 0 { border-radius: $hover-border-radius; }
			}
			@else if length(nth($hover-border-radius,1)) == 1 {
				@if nth($hover-border-radius,1) > 0 { border-radius: $hover-border-radius; }
			}
		}
	
		#{$selector-hover} {
			&:after { width: 100%; }
		}
	}

	@if $hover-style == "hover_box_right" {
		#{$selector}:after {
			top: 0;
			right: 0;
			height: 100%;
			width: 0;
		
			@if length(nth($hover-border-radius, 1)) == 4 {
				@if nth(nth($hover-border-radius, 1), 1) > 0 or  nth(nth($hover-border-radius, 1),2) > 0 or nth(nth($hover-border-radius, 1),3) > 0 or nth(nth($hover-border-radius, 1),4) > 0 { border-radius: $hover-border-radius; }
			}
			@else if length(nth($hover-border-radius,1)) == 1 {
				@if nth($hover-border-radius,1) > 0 { border-radius: $hover-border-radius; }
			}
		}
	
		#{$selector-hover} {
			&:after { width: 100%; }
		}
	}

	@if $hover-style == "hover_box_zoom" {
		#{$selector}:after {
			top: 50%;
			left: 50%;
			height: 0;
			width: 0;
			transform: translate(-50%,-50%);
		
			@if length(nth($hover-border-radius, 1)) == 4 {
				@if nth(nth($hover-border-radius, 1), 1) > 0 or  nth(nth($hover-border-radius, 1),2) > 0 or nth(nth($hover-border-radius, 1),3) > 0 or nth(nth($hover-border-radius, 1),4) > 0 { border-radius: $hover-border-radius; }
			}
			@else if length(nth($hover-border-radius,1)) == 1 {
				@if nth($hover-border-radius,1) > 0 { border-radius: $hover-border-radius; }
			}
		}
	
		#{$selector-hover} {
			&:after {
				height: 100%;
				width: 100%;
			}
		}
	}

	@if $hover-style == "hover_border" {
		#{$selector}:before {
			height: 100%;
			width: 100%;
			top: 0;
			left: 0;
			border: $hover-border-size solid if(type-of($color-active) == color, $color-active, $color);
			background: none;
			opacity: 0;
		
			@if length(nth($hover-border-radius, 1)) == 4 {
				@if nth(nth($hover-border-radius, 1), 1) > 0 or  nth(nth($hover-border-radius, 1),2) > 0 or nth(nth($hover-border-radius, 1),3) > 0 or nth(nth($hover-border-radius, 1),4) > 0 { border-radius: $hover-border-radius; }
			}
			@else if length(nth($hover-border-radius,1)) == 1 {
				@if nth($hover-border-radius,1) > 0 { border-radius: $hover-border-radius; }
			}
		}
	
		#{$selector-hover} {
			color: $color;
		
			&:before { opacity: 1; }
		}
	}

	@if $hover-style == "hover_border_vertical" {
		#{$selector} {
			padding-left: 0;
			padding-right: 0;
		
			&:before,
			&:after {
				// Represents the border
				height: $hover-border-size;
				width: 100%;
				transform: translateY(-$padding);
				top: 0;
				left: 0;
				opacity: 0;
			
				@if length(nth($hover-border-radius, 1)) == 4 {
					@if nth(nth($hover-border-radius, 1), 1) > 0 or  nth(nth($hover-border-radius, 1),2) > 0 or nth(nth($hover-border-radius, 1),3) > 0 or nth(nth($hover-border-radius, 1),4) > 0 {
						border-radius: $hover-border-radius;
						display: box;
					}
				}
				@else if length(nth($hover-border-radius,1)) == 1 {
					@if nth($hover-border-radius,1) > 0 {
						border-radius: $hover-border-radius;
						display: box;
					}
				}
			}
		
			&:after {
				top: auto;
				bottom: 0;
				transform: translateY($padding);
			}
		}
	
		#{$selector-hover} {
			color: $color;
		
			&:before,
			&:after {
				opacity: 1;
				transform: translateY(0);
			
				@if type-of($color-active) == "color" { background: $color-active; }
			}
		
			&:after {
				top: auto;
				transform: translateY(0);
			}
		}
	}

	@if $hover-style == "hover_border_horizontal" {
		#{$selector} {
			padding-top: 0;
			padding-bottom: 0;
		
			&:before,
			&:after {
				// Represents the border
				width: $hover-border-size;
				height: 100%;
				transform: translateX(-$padding);
				left: 0;
				top: 0;
				opacity: 0;
			
				@if length(nth($hover-border-radius, 1)) == 4 {
					@if nth(nth($hover-border-radius, 1), 1) > 0 or  nth(nth($hover-border-radius, 1),2) > 0 or nth(nth($hover-border-radius, 1),3) > 0 or nth(nth($hover-border-radius, 1),4) > 0 { border-radius: $hover-border-radius; }
				}
				@else if length(nth($hover-border-radius,1)) == 1 {
					@if nth($hover-border-radius,1) > 0 { border-radius: $hover-border-radius; }
				}
			}
		
			&:after {
				left: auto;
				right: 0;
				transform: translateX($padding);
			}
		}
	
		#{$selector-hover} {
			color: $color;
		
			&:before,
			&:after {
				opacity: 1;
				transform: translateX(0);
			
				@if type-of($color-active) == "color" { background: $color-active; }
			}
		
			&:after {
				left: auto;
				right: 0;
			}
		}
	}

	@if $hover-style == "hover_border_top" {
		#{$selector} {
			padding: $padding 0;
		
			&:before {
				// Represents the border
				height: $hover-border-size;
				width: 100%;
				transform: translateY(-$padding);
				top: 0;
				left: 0;
				opacity: 0;
			
				@if length(nth($hover-border-radius, 1)) == 4 {
					@if nth(nth($hover-border-radius, 1), 1) > 0 or  nth(nth($hover-border-radius, 1),2) > 0 or nth(nth($hover-border-radius, 1),3) > 0 or nth(nth($hover-border-radius, 1),4) > 0 { border-radius: $hover-border-radius; }
				}
				@else if length(nth($hover-border-radius,1)) == 1 {
					@if nth($hover-border-radius,1) > 0 { border-radius: $hover-border-radius; }
				}
			}
		}
	
		#{$selector-hover} {
			color: $color;
		
			&:before {
				opacity: 1;
				transform: translateY(0);
			
				@if type-of($color-active) == "color" { background: $color-active; }
			}
		}
	}

	@if $hover-style == "hover_border_bottom" {
		#{$selector} {
			padding: $padding 0;
		
			&:before {
				// Represents the border
				height: $hover-border-size;
				width: 100%;
				bottom: 0;
				transform: translateY($padding);
				left: 0;
				opacity: 0;
			
				@if length(nth($hover-border-radius, 1)) == 4 {
					@if nth(nth($hover-border-radius, 1), 1) > 0 or  nth(nth($hover-border-radius, 1),2) > 0 or nth(nth($hover-border-radius, 1),3) > 0 or nth(nth($hover-border-radius, 1),4) > 0 { border-radius: $hover-border-radius; }
				}
				@else if length(nth($hover-border-radius,1)) == 1 {
					@if nth($hover-border-radius,1) > 0 { border-radius: $hover-border-radius; }
				}
			}
		}
	
		#{$selector-hover} {
			color: $color;
		
			&:before {
				opacity: 1;
				transform: translateY(0);
			
				@if type-of($color-active) == "color" { background: $color-active; }
			}
		}
	}
}

/**
 * Last Update: 2018-12-03T17:36:38+01:00
 *
 * @Param("paragraph-columns", type="number") 
 * @Param("column-gap", type="number", options={"units"={"rem"}}) */
@mixin about($paragraph-columns: 1, $column-gap: $spacer) {
	.about-text {
		@if $paragraph-columns > 1 {
			display: block;
		
			@media screen and (min-width: $breakpoint-sm) {
				column : {
					count: $paragraph-columns;
					gap: $column-gap;
				}
			}
		}
	}

	// If this container is inside another container, revert all paddings
	.ed-container & {
		> .inner { padding: 0; }
	}
}

/**
 * Preset boxes
 * Last Update: 2018-12-03T17:42:19+01:00
 *
 * @Param("box-background", type="color", group="box")
 * @Param("box-border-width", type="number", options={"units"={"rem", "px"}}, group="box")
 * @Param("box-border-style", type="choice", options={"choices"={"solid", "dashed", "dotted", "double"}}, group="box")
 * @Param("box-border-color", type="color", group="box") 
 * @Param("box-padding", type="number", options={"units"={"rem"}}, group="box")
 * @Param("fz-icon", type="number", options={"units"={"rem"}}, group="icon")
 * @Param("icon-padding", type="number", options={"units"={"rem"}}, group="icon")
 * @Param("icon-background", type="color", group="icon")
 * @Param("icon-color", type="color", group="icon")
 * @Param("icon-position", type="choice", options={"choices"={"normal", "outside", "left", "right"}}, group="icon")
 * @Param("icon-fullwidth-mobile", type="bool", group="icon")
 * @Param("icon-border-width", type="number", options={"units"={"rem", "px"}}, group="icon")
 * @Param("icon-border-style", type="choice", options={"choices"={"solid", "dashed", "dotted", "double"}}, group="icon")
 * @Param("icon-border-color", type="color", group="icon") 
 * @Param("icon-circle", type="bool", group="icon")
 * @Param("margin", type="number", options={"units"={"rem"}}, group="columns")
 * @Param("margin-horizontal", type="bool", group="columns")
 * @Param("grow", type="bool", group="columns")
 * @Param("columns-xs", type="number", group="columns")
 * @Param("columns-sm", type="number", group="columns")
 * @Param("columns-lg", type="number", group="columns")
 * @Param("hover-scale", type="bool", desc="scale hover effect 1.05 for the box", group="other") */
@mixin boxes(
	$box-background: $color-background, 
	$box-border-width: 0px, 
	$box-border-style: solid, 
	$box-border-color: $color-secondary, 
	$box-padding: $spacer, 
	$fz-icon: 3rem, 
	$icon-padding: $spacer, 
	$icon-background: none, 
	$icon-color: none, 
	$icon-position: normal, 
	$icon-fullwidth-mobile: true, 
	$icon-border-width: 0px, 
	$icon-border-style: solid, 
	$icon-border-color: $color-secondary, 
	$icon-circle: false, 
	$margin: $padding-vertical, 
	$margin-horizontal: false, 
	$grow: true, 
	$columns-xs: 1, 
	$columns-sm: 2, 
	$columns-lg: 3, 
	$hover-scale: false
) {
	$background-check: first-color($box-background,$color-background);
	$headline-color: prioritize-color($color: $color-headlines, $background: $background-check);
	$text-color: color-contrast($background-check, $color-background, $color-default);

	$icon-background-check: first-color($icon-background,$box-background,$color-background);
	$icon-color: if(type-of($icon-color) == color,$icon-color,prioritize-color($color: $color-primary, $background: $icon-background-check));
	$icon-container: $fz-icon + $icon-padding*2;
	$icon-offset: $icon-container / 2;

	> .inner {
		align-items: stretch;
		align-content: stretch;
	}

	@include flex-grid-row($margin: $margin, $margin-horizontal: $margin-horizontal);

	h1,
	h2,
	h3,
	h4,
	h5,
	h6 {
		margin-top: $padding-vertical;
		margin-bottom: $padding-vertical;
		color: $headline-color;
	}

	.ed-headline:last-child h3 { margin-bottom: 0; }
	p { margin: 0; }

	.boxes-icon {
		svg {
			display: block;
			fill: $icon-color;
			height: $fz-icon;
			width: $fz-icon;
			line-height: $fz-icon;
		}
	
		@if $icon-border-width > 0 and type-of($icon-border-color) == color {
			border: {
				width: $icon-border-width;
				style: $icon-border-style;
				color: $icon-border-color;
			}
		}
		@if type-of($icon-background) == color or $icon-border-width > 0 and type-of($icon-border-color) == color { padding: $icon-padding; }
	
		@if type-of($icon-background) == "color" {
			background: $icon-background;
			text-align: center;
		}
	}

	.boxes-box {
		@include flex-grid-column(
			$margin: $margin, 
			$grow: $grow, 
			$columns-xs: $columns-xs, 
			$columns-sm: $columns-sm, 
			$columns-lg: $columns-lg, 
			$max-width: true, 
			$ie: true
		);
	
		@if type-of($box-background) == color and $box-background != none {
			background: $box-background;
		
			&,
			.ed-element:not(.ed-button) > a { color: $text-color; }
		}
	
		@if $box-border-width > 0 and type-of($box-border-color) == color {
			border: {
				width: $box-border-width;
				style: $box-border-style;
				color: $box-border-color;
			}
		}
	
		> .inner { padding: $box-padding; }
	}

	@if $icon-position == "normal" {
		// overflow visible needed to display shadow otherwise it crops
		overflow: if($feature-shadows,visible,hidden);
	
		.boxes-box {
			text-align: center;
			// overflow visible needed to display shadow otherwise it crops
			> .inner {
				box-shadow: if($feature-shadows,$box-shadow,none);
				border-radius: if($feature-rounded,$border-radius,0);
				justify-content: center;
			
				> .boxes-icon { flex: none; }
			}
		}
	}

	@if $icon-position == "normal" or $icon-position == "outside" {
		.boxes-icon {
			@if type-of($icon-background) == color or $icon-border-width > 0 and type-of($icon-border-color) == color {
				box-shadow: if($feature-shadows,$box-shadow,none);
				border-radius: if($icon-circle,50%,if($feature-rounded,$border-radius,0));
			}
		}
	}

	@if $icon-position == "outside" {
		// overflow visible needed to display shadow otherwise it crops
		overflow: if($feature-shadows,visible,hidden);
	
		.boxes-box {
			// overflow visible needed to display the offset icon
			overflow: visible;
			margin: $margin;
			margin-top: $icon-offset + $margin;
			min-width: $icon-container;
			text-align: center;
		
			> .inner {
				box-shadow: if($feature-shadows,$box-shadow,none);
				border-radius: if($feature-rounded,$border-radius,0);
			}
		}
	
		.boxes-icon {
			margin-top: -($icon-offset + $box-padding);
			padding: $icon-padding;
			align-self: center;
			flex: none;
			justify-content: center;
		}
	}

	@else if $icon-position == "left" or $icon-position == "right" {
		h3 { margin-top: 0; }
	
		// overflow visible needed to display shadow otherwise it crops
		overflow: if($feature-shadows,visible,hidden);
	
		.boxes-box {
			// overflow visible needed to display shadow otherwise it crops
			overflow: if($feature-shadows,visible,hidden);
		
			> .inner {
				background-color: transparent;
				align-content: stretch;
				align-items: stretch;
				justify-content: center;
				padding: 0;
			
				@if $box-background != none and $icon-background != none {
					box-shadow: if($feature-shadows,$box-shadow,none);
					border-radius: if($feature-rounded, $border-radius, 0);
				}
			}
		}
	
		.boxes-icon {
			flex-basis: $icon-container;
			padding: $icon-padding;
			display: flex;
			align-items: center;
			align-content: center;
			justify-content: center;
		
			@if $icon-position == "right" { order: 2; }
		
			@if $box-background == none and $icon-background != none {
				border-radius: if($feature-rounded, $border-radius, 0);
				box-shadow: if($feature-shadows,$box-shadow,none);
			}
		
			@else if $feature-rounded and $icon-position == "right" { border-radius: 0 $border-radius $border-radius 0; }
			@else if $feature-rounded { border-radius: $border-radius 0 0 $border-radius; }
		}
	
		.boxes-box-inner {
			flex: 1;
			padding: $box-padding;
		
			@if type-of($box-background) == color {
				border-radius: if($feature-rounded,$border-radius,0);
			
				@if type-of($icon-background) != color { box-shadow: if($feature-shadows,$box-shadow,none); }
			
				@if $feature-rounded and type-of($icon-background) == color {
					border-radius: 0 $border-radius $border-radius 0;
				
					@if $icon-position == "right" { border-radius: $border-radius 0 0 $border-radius; }
				}
			
				@if type-of($box-background) == color { background: $box-background; }
			}
		}
	}

	@if $icon-position == "normal" or $icon-position == "outside" {
		// responsive hack for now
		@media screen and (max-width: $breakpoint-sm-max) {
			.boxes-box > .inner {
				justify-content: center;
			
				.boxes-icon { order: -1; }
				.boxes-box-inner { flex-basis: 100%; }
			}
		}
	}

	@if $icon-position == "left" or $icon-position == "right" {
		// responsive hack for now
		@if $icon-fullwidth-mobile {
			@media screen and (max-width: $breakpoint-xs-max) {
				.boxes-box > .inner {
					justify-content: right;
				
					.boxes-icon {
						order: -1;
						flex-basis: 100%;
					}
				
					.boxes-box-inner { flex-basis: 100%; }
				}
			}
		}
	}

	// if animations and hover-style effect are enabled, scale on hover
	@if $hover-scale and $feature-animations {
		overflow: visible;
	
		.boxes-box {
			transition: $transition-base;
			transition-property: transform;
		
			&:hover { transform: scale(1.025); }
		}
	}
}

/**
 * Callout
 * Last Update: 2018-12-03T17:36:44+01:00
 *
 * @Param("color", type="color")
 * @Param("box-width-xs", type="number", options={"units"={"%", "px", "vh"}})
 * @Param("box-width-sm", type="number", options={"units"={"%", "px", "vh"}})
 * @Param("box-width-lg", type="number", options={"units"={"%", "px", "vh"}}) 
 * @Param("box-align", type="choice", options={"choices"={"left","center","right"}})
 * @Param("box-background", type="color")
 * @Param("box-padding", type="number", options={"units"={"px","rem"}}) */
@mixin callout(
	$color: none, 
	$box-width-xs: 100%, 
	$box-width-sm: 100%, 
	$box-width-lg: 50%, 
	$box-align: center, 
	$box-background: none, 
	$box-padding: 0rem
) {
	$background-check: first-color($box-background, $color-default);
	$text-color: if(type-of($color) != color,color-contrast($background-check, $color-default, $color-background),$color);

	h1,
	h2,
	h3,
	h4,
	h5,
	h6 { color: $text-color; }

	> .inner {
		padding-left: $spacer;
		padding-right: $spacer;
	
		@if $box-align == center { justify-content: $box-align; }
		@else if $box-align == right { justify-content: flex-end; }
	}

	p,
	a,
	a:hover,
	li {
		margin: 0;
		color: $text-color;
	}

	.box {
		overflow: visible;
		flex-basis: $box-width-xs;
		max-width: $box-width-xs;
	
		@media screen and (min-width: $breakpoint-sm) {
			flex-basis: $box-width-sm;
			max-width: $box-width-sm;
		}
	
		@media screen and (min-width: $breakpoint-md) {
			flex-basis: $box-width-lg;
			max-width: $box-width-lg;
		}
	
		@if type-of($box-background) == color {
			background: $box-background;
			border-radius: if($feature-rounded,$border-radius,0);
			box-shadow: if($feature-shadows,$box-shadow,none);
		}
	
		padding: $box-padding;
	}
}

/**
 * Form
 * Last Update: 2018-12-04T10:40:31+01:00
 * 
 * @Param("background", type="color", group="container")
 * @Param("input-background", type="color", group="input")
 * @Param("input-border-width", type="number", options={"units"={"rem", "px"}}, group="input")
 * @Param("input-border-style", type="choice", options={"choices"={"solid", "dashed", "dotted", "double"}}, group="input")
 * @Param("input-border-color", type="color", group="input")
 * @Param("input-color", type="color", group="input")
 * @Param("input-placeholder", type="color", group="input")
 * @Param("input-width", type="number", options={"units"={"%"}}, group="input")
 * @Param("input-submit-background", type="color", group="input")
 * @Param("input-submit-background-active", type="color", group="input")
 * @Param("horizontal-checkbox", type="bool", group="input")
 * @Param("horizontal-radio", type="bool", group="input") 
 * @Param("margin", type="number", options={"units"={"rem"}}, group="layout") */
@mixin contact-form(
	$background: none, 
	$input-background: none, 
	$input-border-width: 1px, 
	$input-border-style: solid, 
	$input-border-color: $color-default, 
	$input-color: none, 
	$input-placeholder: none, 
	$input-width: 100%, 
	$input-submit-background: $color-primary, 
	$input-submit-background-active: none, 
	$horizontal-checkbox: false, 
	$horizontal-radio: false, 
	$margin: $padding-vertical
) {
	$background-check: first-color($background, $color-background);
	$headline-color: prioritize-color($color: $color-headlines, $background: $background-check);

	$input-color: if(type-of($input-color) == color,$input-color,
																			    	color-contrast(if(type-of($input-background) == color,$input-background,$background),
																			    	$color-default,$color-background));
	$input-submit-background-active: if(type-of($input-submit-background-active) == color,$input-submit-background-active,darken($input-submit-background,10%));
	$input-submit-color: color-contrast($input-submit-background, $color-default, $color-background);
	$input-submit-color-active: color-contrast($input-submit-background-active, $color-default, $color-background);

	%item-horizontal {
		li {
			display: inline-block;
			margin-right: 1rem;
		}
	}

	background-color: $background;
	// If this container is inside another container, revert all paddings
	.ed-container & {
		> .inner {
			padding: 0;
			background-color: transparent;
		}
	}

	.ed-form-container {
		max-width: 100%;
		margin-bottom: 0;
	}

	.ed-form-captcha { margin-bottom: $spacer; }

	form {
		display: flex;
		flex-flow: row wrap;
		justify-content: stretch;
		margin: -$margin;
	
		> .ed-element {
			margin: $margin;
			flex: 1 1 100%;
			flex-grow: 1;
			flex-shrink: 1;
		
			@media screen and (min-width: $breakpoint-xs) {
				flex-basis: $input-width;
			}
		
			&.ed-form-textarea { flex-basis: 100%; }
		}
	
		.ed-form-captcha { flex-wrap: wrap; }
	
		input[type="checkbox"],
		input[type="radio"] { vertical-align: middle; }
	
		input[type="text"],
		input[type="number"],
		input[type="email"],
		input[type="phone"],
		select,
		textarea {
			background: $input-background;
			padding: .5rem 1rem;
			line-height: $lh-base;
			color: $input-color;
			font-family: $font-default;
			font-weight: $fw-base;
		
			@if $input-border-width > 0 and type-of($input-border-color) == color {
				border: {
					width: $input-border-width;
					style: $input-border-style;
					color: $input-border-color;
				}
			}
			@else  { border: none; }
		
			&:not(select) { -webkit-appearance: none; }
		
			@if $feature-rounded { border-radius: $border-radius; }
			@if $feature-shadows { box-shadow: $box-shadow; }
		
			&:focus { outline: 0; }
		
			&::placeholder {
				@if type-of($input-placeholder) == "color" {
					color: $input-placeholder;
					opacity: 1;
				}
			
				@else  { color: rgba($input-color, 0.85); }
			}
		}
	
		input[type=file] {
			white-space: nowrap;
			overflow: hidden;
			text-overflow: ellipsis;
			width: 250px;
		}
	
		select[multiple] {
			height: auto;
			appearance: menulist;
		}
	
		@if $horizontal-checkbox {
			ul.checkbox_list {
				@extend %item-horizontal;
			}
		}
		@if $horizontal-radio {
			ul.radio_list {
				@extend %item-horizontal;
			}
		}
	
		textarea { height: 10rem; }
	
		.ed-form-date {
			:invalid { box-shadow: none; }
			:-moz-submit-invalid { box-shadow: none; }
			:-moz-ui-invalid { box-shadow: none; }
		}
	
		.ed-form-captcha {
			// limit captcha width to 100px on small displays, so all captcha controls fit into one line
			@media screen and (max-width: $breakpoint-xs) {
				img { max-width: 100px; }
			}
		
			input[type="text"] { text-transform: none; }
		}
	
		button[type="submit"] {
			line-height: $lh-base;
			height: auto;
			border: none;
			padding: $padding-vertical $padding-horizontal;
			background: $input-submit-background;
			color: $input-submit-color;
			width: 100%;
			-webkit-appearance: none;
			transition: $transition-base;
			transition-property: background-color;
		
			@if $feature-transitions {
				transition: $transition-base;
				transition-property: background-color, color;
			}
		
			@if $feature-rounded { border-radius: $border-radius; }
		
			&:hover {
				background: $input-submit-background-active;
				color: $input-submit-color-active;
				color: #fff;
			}
		}
	}
}

/**
* Containers show as grid
* Last Update: 2018-12-14T11:17:16+01:00
* 
* @Param("box-background", type="color", group="box")
* @Param("box-border-width", type="number", options={"units"={"rem", "px"}}, group="box")
* @Param("box-border-style", type="choice", options={"choices"={"solid", "dashed", "dotted", "double"}}, group="box")
* @Param("box-border-color", type="color", group="box") 
* @Param("box-padding", type="number", options={"units"={"rem"}}, group="box")
* @Param("margin", type="number", options={"units"={"rem", "px", "vw"}}, group="columns")
* @Param("margin-horizontal", type="bool", group="columns")
* @Param("grow", type="bool", group="columns")
* @Param("columns-xs", type="number", group="columns")
* @Param("columns-sm", type="number", group="columns")
* @Param("columns-lg", type="number", group="columns") 
* @Param("center-content", type="bool", group="other")
*/
@mixin columns(
	$box-background: none, 
	$box-border-width: 0px, 
	$box-border-style: solid, 
	$box-border-color: $color-secondary, 
	$box-padding: 0rem, 
	$margin: $padding-vertical, 
	$margin-horizontal: false, 
	$grow: true, 
	$columns-xs: 1, 
	$columns-sm: 2, 
	$columns-lg: 2, 
	$center-content: true
) {
	$background-check: first-color($box-background,$color-background);
	$headline-color: prioritize-color($color: $color-headlines, $background: $background-check);
	$text-color: color-contrast($background-check, $color-background, $color-default);

	> .inner {
		align-items: stretch;
		align-content: stretch;
	}

	@include flex-grid-row($margin: $margin, $margin-horizontal: $margin-horizontal);

	.columns-box {
		@include flex-grid-column(
			$margin: $margin, 
			$grow: $grow, 
			$columns-xs: $columns-xs, 
			$columns-sm: $columns-sm, 
			$columns-lg: $columns-lg, 
			$ie: true
		);
	
		h1,
		h2,
		h3,
		h4,
		h5,
		h6 { color: $headline-color; }
	
		p:last-child { margin-bottom: 0; }
	
		background: $box-background;
		border-radius: if($feature-rounded,$border-radius,0);
		box-shadow: if($feature-shadows,$box-shadow,none);
	
		&,
		.ed-element:not(.ed-button) > a { color: $text-color; }
	
		> .inner {
			padding: $box-padding;
		
			@if $box-border-width > 0 and type-of($box-border-color) == color {
				border: {
					width: $box-border-width;
					style: $box-border-style;
					color: $box-border-color;
				}
			}
		}
	}
}

/**
 * Last Update: 2018-12-03T17:35:55+01:00
 *
 * @Param("width-mobile-auto", type="bool", group="columns")
 * @Param("width-mobile", type="number", options={"units"={"px", "%", "rem"}}, group="columns")
 * @Param("margin", type="number", options={"units"={"rem"}}, group="columns")
 * @Param("margin-tablet", type="number", options={"units"={"rem"}}, group="columns")
 * @Param("margin-mobile", type="number", options={"units"={"rem"}}, group="columns")
 * @Param("margin-horizontal", type="bool", group="columns")
*/
@mixin button-column(
	$width-mobile-auto: true, 
	$width-mobile: 100%, 
	$margin: 0.75rem, 
	$margin-tablet: 0.5rem, 
	$margin-mobile: 0.25rem, 
	$margin-horizontal: false
) {
	@include flex-grid-row($margin: $margin, $margin-horizontal: $margin-horizontal);

	> .inner {
		margin: -$margin-mobile;
	
		@media screen and (min-width: $breakpoint-xs) {
			margin: -$margin-tablet;
		}
		@media screen and (min-width: $breakpoint-md) {
			margin: -$margin;
		}
	
		width: calc(100% + #{$margin*2});
	}

	.ed-button {
		flex-basis: auto;
		margin: $margin-mobile;
	
		@media screen and (max-width: $breakpoint-xs) {
			&,
			a {
				max-width: 100%;
				text-align: center;
			
				@if not $width-mobile-auto { width: $width-mobile; }
			}
		}
		@media screen and (min-width: $breakpoint-sm) {
			margin: $margin-tablet;
		}
		@media screen and (min-width: $breakpoint-md) {
			margin: $margin;
		}
	}
}

/**
 * Preset boxes
 * Last Update: 2018-12-03T17:42:14+01:00
 *
 * @Param("box-background", type="color", group="box")
 * @Param("box-border-width", type="number", options={"units"={"rem", "px"}}, group="box")
 * @Param("box-border-style", type="choice", options={"choices"={"solid", "dashed", "dotted", "double"}}, group="box")
 * @Param("box-border-color", type="color", group="box") 
 * @Param("box-padding", type="number", options={"units"={"rem"}}, group="box")
 * @Param("margin", type="number", options={"units"={"rem"}}, group="columns")
 * @Param("margin-horizontal", type="bool", group="columns")
 * @Param("grow", type="bool", group="columns")
 * @Param("columns-xs", type="number", group="columns")
 * @Param("columns-sm", type="number", group="columns")
 * @Param("columns-lg", type="number", group="columns")
 * @Param("hover-scale", type="bool", desc="scale hover effect 1.05 for the box", group="other") */
@mixin image-boxes(
	$box-background: $color-background, 
	$box-border-width: 0px, 
	$box-border-style: solid, 
	$box-border-color: $color-secondary, 
	$box-padding: $spacer, 
	$margin: $padding-vertical, 
	$margin-horizontal: false, 
	$grow: true, 
	$columns-xs: 1, 
	$columns-sm: 2, 
	$columns-lg: 3, 
	$hover-scale: false
) {
	$background-check: first-color($box-background,$color-background);
	$headline-color: prioritize-color($color: $color-headlines, $background: $background-check);
	$text-color: color-contrast($background-check, $color-default, $color-background);

	> .inner {
		align-content: stretch;
		align-items: stretch;
	}

	@include flex-grid-row($margin: $margin, $margin-horizontal: $margin-horizontal);

	.ed-headline:last-child h3 { margin-bottom: 0; }
	p { margin: 0; }

	.image-boxes-box {
		box-shadow: if($feature-shadows,$box-shadow,none);
		border-radius: if($feature-rounded,$border-radius,0);
	
		@if type-of($box-background) == color and $box-background != none {
			background: $box-background;
		
			&,
			.ed-element:not(.ed-button) a { color: $text-color; }
		}
	
		@if $box-border-width > 0 and type-of($box-border-color) == color {
			border: {
				width: $box-border-width;
				style: $box-border-style;
				color: $box-border-color;
			}
		}
	
		@include flex-grid-column(
			$margin: $margin, 
			$grow: $grow, 
			$columns-xs: $columns-xs, 
			$columns-sm: $columns-sm, 
			$columns-lg: $columns-lg, 
			$max-width: true, 
			$ie: true
		);
	
		> .inner {
			> .ed-element:not(.ed-image) {
				padding-left: $box-padding;
				padding-right: $box-padding;
			}
		
			> .ed-element { flex-shrink: 1; }
			> .ed-image + .ed-element { padding-top: $box-padding; }
			> .ed-element:last-child { padding-bottom: $box-padding; }
		}
	}

	h1,
	h2,
	h3,
	h4,
	h5,
	h6 { color: $headline-color; }

	@if $hover-scale and $feature-animations {
		overflow: visible;
	
		.image-boxes-box {
			transition: $transition-base;
			transition-property: transform;
		
			&:hover { transform: scale(1.025); }
		}
	}
}

/**
 * Last Update: 2018-12-03T17:36:10+01:00
 *
 * @Param("box-background", type="color", group="box")
 * @Param("box-padding", type="number", options={"units"={"rem"}}, group="box")
 * @Param("box-width-xs", type="number", options={"units"={"%"}}, group="box")
 * @Param("box-width-sm", type="number", options={"units"={"%"}}, group="box")
 * @Param("box-width-lg", type="number", options={"units"={"%"}}, group="box")
 * @Param("margin", type="number", options={"units"={"rem"}}, group="layout")
 * @Param("margin-horizontal", type="bool", group="layout") */
@mixin unequal-columns(
	$box-background: none, 
	$box-padding: 0rem, 
	$box-width-xs: 100%, 
	$box-width-sm: 50%, 
	$box-width-lg: 66%, 
	$margin: $padding-vertical, 
	$margin-horizontal: false
) {
	$background-check: first-color($box-background,$color-background);
	$text-color: color-contrast($background-check, $color-background, $color-default, $white);
	$headline-color: prioritize-color($color: $color-headlines, $background: $background-check);

	> .inner {
		align-items: stretch;
		align-content: stretch;
	}

	@include flex-grid-row($margin: $margin, $margin-horizontal: $margin-horizontal);

	.unequal-columns-box {
		// get headline color based on contrast if box-background is set
		background: $box-background;
		border-radius: if($feature-rounded,$border-radius,0);
		box-shadow: if($feature-shadows,$box-shadow,none);
		color: $text-color;
	
		h1,
		h2,
		h3,
		h4,
		h5,
		h6 { color: $headline-color; }
	
		> .inner {
			@if $box-padding > 0 { padding: $box-padding; }
		}
	}

	.unequal-columns-box-shrink {
		// As long as we don't have enough space to put both containers side by side keep a little margin between them
		margin: $margin;
		flex: 1 1 0%;
		flex-grow: 1;
		flex-shrink: 1;
	}

	.unequal-columns-box-flex {
		margin: $margin;
		flex-basis: calc(#{$box-width-xs} - #{2*$margin});
		position: relative;
		// IE10+ HACK
		@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
			overflow: hidden;
		}
		@media screen and (min-width: $breakpoint-sm) {
			flex-basis: calc(#{$box-width-sm} - #{2*$margin});
		}
		@media screen and (min-width: $breakpoint-md) {
			flex-basis: calc(#{$box-width-lg} - #{2*$margin});
		}
	
		.edit & {
			border: 1px solid #f58220;
			position: relative;
		
			&:before {
				position: absolute;
				z-index: -1;
				top: 0;
				left: -1px;
				content: "Flexible box";
				display: block;
				background: #f58220;
				color: #fff;
				padding: 4px;
				font-size: 12px;
				line-height: 1;
				font-family: Helvetica, sans-serif;
			}
		}
	}
}

/**
* Table preset with different styles
* Last Update: 2018-12-03T17:43:33+01:00
*
* @Param("header-background", type="color", group="header")
* @Param("header-color", type="color", group="header")
* @Param("header-border-width", type="number", options={"units"={"rem", "px"}}, group="header")
* @Param("header-border-style", type="choice", options={"choices"={"solid", "dashed", "dotted", "double"}}, group="header")
* @Param("header-border-color", type="color", group="header") 
* @Param("background", type="color", group="table")
* @Param("color", type="color", group="table")
* @Param("style", type="choice", options={"choices"={"normal", "border-full",  "border-cross"}}, group="table")
* @Param("stripes-style", type="choice", options={"choices"={"none", "row", "cell"}}, group="table")
* @Param("stripes-background", type="color", group="table")
* @Param("stripes-color", type="color", group="table")
* @Param("hover-style", type="choice", options={"choices"={"none", "row", "cell", "zoom-row", "zoom-cell"}}, group="table")
* @Param("hover-background", type="color", group="table")
* @Param("padding-horizontal", type="number", options={"units"={"px", "rem"}}, group="table") 
* @Param("padding-vertical", type="number", options={"units"={"px", "rem"}}, group="table") 
* @Param("border-width", type="number", options={"units"={"rem", "px"}}, group="table")
* @Param("border-style", type="choice", options={"choices"={"solid", "dashed", "dotted", "double"}}, group="table")
* @Param("border-color", type="color", group="table") 
* @Param("last-item-right", type="bool", group="table")
*/
@mixin table(
	$header-background: none, 
	$header-color: none, 
	$header-border-width: 1px, 
	$header-border-style: solid, 
	$header-border-color: #dbdbdb, 
	$background: #fff, 
	$color: none, 
	$style: normal, 
	$stripes-style: none, 
	$stripes-background: #f9f9f9, 
	$stripes-color: none, 
	$hover-style: none, 
	$hover-background: rgba($color-default,0.1), 
	$padding-horizontal: 8px, 
	$padding-vertical: 12px, 
	$border-width: 1px, 
	$border-style: solid, 
	$border-color: #dbdbdb, 
	$last-item-right: true
) {
	$text-color: if(type-of($color) != color,color-contrast($background, $color-default, $color-background),$color);

	$header-background-check: first-color($header-background,$background,$color-background);
	$header-color: if(type-of($header-color) != color,prioritize-color($color: $color-primary, $background: $header-background-check),$header-color);

	$stripes-background-check: first-color($stripes-background,$background,$color-background);
	$stripes-color: if(type-of($stripes-color) != color,color-contrast($stripes-background-check, $color-default, $color-background),$stripes-color);

	.ed-container & > .inner { padding: 0; }
	.table-text {
		@media screen and (max-width: $breakpoint-sm-max) {
			overflow-x: scroll;
		}
	}

	overflow: if($feature-shadows,visible,hidden);

	table {
		// basic reset  //	border-collapse: collapse; // border-spacing: 0; 
		border-radius: if($feature-rounded,$border-radius,0);
		box-shadow: if($feature-shadows,$box-shadow,none);
		background: $background;
		color: $text-color;
	
		td,
		th {
			padding: 0;
			font-weight: unset;
			padding: $padding-vertical $padding-horizontal;
			line-height: 1;
		}
	
		thead > tr > th {
			background: $header-background;
			color: $header-color;
			border-color: $header-border-color;
		}
	
		@if $last-item-right {
			tr > td:last-child,
			tr > th:last-child { text-align: right; }
		}
	
		// Different border styles
		@if $style == "normal" {
			thead tr th {
				@if $header-border-width > 0 and type-of($header-border-color) == color { border-bottom: $header-border-width $header-border-style $header-border-color; }
			}
		
			tbody tr:not(:last-child) {
				@if $border-width > 0 and type-of($border-color) == color { border-bottom: $border-width $border-style $border-color; }
			}
		}
	
		@if $style == "border-cross" or $style == "border-full" {
			tr {
				&:first-child {
					th,
					td { border-top: none; }
				}
			
				&:last-child td { border-bottom: none; }
			}
		
			td,
			th {
				&:first-child { border-left: none; }
				&:last-child { border-right: none; }
			}
		
			td {
				@if $border-width > 0 and type-of($border-color) == color {
					border: {
						width: $border-width;
						style: $border-style;
						color: $border-color;
					}
				}
			}
		
			th {
				@if $header-border-width > 0 and type-of($header-border-color) == color {
					border: {
						width: $header-border-width;
						style: $header-border-style;
						color: $header-border-color;
					}
				}
			}
		
			@if $style == "border-full" {
				@if $border-width > 0 and type-of($border-color) == color {
					border: {
						width: $border-width;
						style: $border-style;
						color: $border-color;
					}
				}
			}
		}
	
		// Background styles 
		tr {
			@if $stripes-style == "row" {
				&:nth-child(even) {
					@if type-of($stripes-background) == color { background: $stripes-background; }
				
					color: $stripes-color;
				}
			}
			@if $stripes-style == "cell" {
				td:nth-child(even) {
					@if type-of($stripes-background) == color { background: $stripes-background; }
				
					color: $stripes-color;
					background-clip: padding-box;
				}
			}
		}
	
		// Hover styles 
		@if $hover-style == "row" {
			tr {
				transition: $transition-base;
			
				@if type-of($hover-background) == color {
					&:hover { background: $hover-background; }
				}
			}
		}
		@if $hover-style == "zoom-row" {
			tr {
				transition: $transition-base;
				transform: scale(1);
			
				&:hover { transform: scale(1.01); }
			}
		}
		@if $hover-style == "cell" {
			tr td {
				transition: $transition-base;
			
				@if type-of($hover-background) == color {
					&:hover { background: $hover-background; }
				}
			}
		}
		@if $hover-style == "zoom-cell" {
			tr td {
				transition: $transition-base;
				transform: scale(1);
			
				&:hover { transform: scale(1.01); }
			}
		}
	}
}

/**
* one accordion to rule them all
* Last Update: 2018-12-03T17:43:02+01:00
*
* @Param("style", type="choice", options={"choices"={"normal", "columns","tabs"}}, group="style")
* @Param("column-width", type="number", options={"units"={"%"}}, group="columns")
* @Param("column-gap", type="number", options={"units"={"rem", "px"}}, group="columns")
* @Param("tab-grow", type="bool", group="tabs")
* @Param("trigger-background", type="color", group="trigger")
* @Param("trigger-background-active", type="color", group="trigger")
* @Param("trigger-border-width", type="number", options={"units"={"rem", "px"}}, group="trigger")
* @Param("trigger-border-style", type="choice", options={"choices"={"solid", "dashed", "dotted", "double"}}, group="trigger")
* @Param("trigger-border-color", type="color", group="trigger") 
* @Param("trigger-icon", type="choice", options={"choices"={"none", "chevron","plus"}}, group="trigger")
* @Param("trigger-margin", type="number", options={"units"={"rem"}}, group="trigger")
* @Param("trigger-padding", type="number", options={"units"={"rem"}}, group="trigger")
* @Param("trigger-font-size", type="number", options={"units"={"rem", "px"}}, group="trigger")
* @Param("trigger-color", type="color", group="trigger")
* @Param("trigger-color-active", type="color", group="trigger")
* @Param("icon-color", type="color", group="trigger")
* @Param("icon-color-active", type="color", group="trigger")
* @Param("content-background", type="color", group="content") 
* @Param("content-border-width", type="number", options={"units"={"rem", "px"}}, group="content")
* @Param("content-border-style", type="choice", options={"choices"={"solid", "dashed", "dotted", "double"}}, group="content")
* @Param("content-border-color", type="color", group="content")
* @Param("content-padding", type="number", options={"units"={"rem"}}, group="content") */
@mixin accordion(
	$style: normal, 
	$column-width: 25%, 
	$column-gap: $spacer, 
	$tab-grow: true, 
	$trigger-background: $color-secondary, 
	$trigger-background-active: $color-primary, 
	$trigger-border-width: 0px, 
	$trigger-border-style: solid, 
	$trigger-border-color: $color-primary, 
	$trigger-padding: $spacer, 
	$trigger-margin: .5rem, 
	$trigger-icon: plus, 
	$trigger-font-size: $fz-base, 
	$trigger-color: none, 
	$trigger-color-active: none, 
	$icon-color: none, 
	$icon-color-active: none, 
	$content-background: none, 
	$content-border-width: 0px, 
	$content-border-style: solid, 
	$content-border-color: $color-primary, 
	$content-padding: 0rem
) {
	$background-check: first-color($trigger-background,$color-background);
	$background-check-active: first-color($trigger-background-active, $trigger-background,$color-background);

	$headline-color: prioritize-color($color: $color-headlines, $background: $background-check);
	$headline-color-active: prioritize-color($color: $color-primary, $background: $background-check-active);

	$text-color: color-contrast($content-background, $color-default, $color-background);

	$trigger-color: if(type-of($trigger-color) == color,$trigger-color,$headline-color);
	$trigger-color-active: if(type-of($trigger-color-active) == color,$trigger-color-active,$headline-color-active);

	$icon-color: if(type-of($icon-color) == color,$icon-color,$headline-color);
	$icon-color-active: if(type-of($icon-color-active) == color,$icon-color-active,$headline-color-active);

	$svg-color: str-slice(inspect($icon-color), 2);
	$svg-color-active: str-slice(inspect($icon-color-active), 2);

	// - accordion margin fix 
	> .inner > .ed-element {
		margin: 0 $trigger-margin;
		width: calc(100% - #{2*$trigger-margin});
		max-width: calc(100% - #{2*$trigger-margin});
	
		&:first-child { margin-top: $trigger-margin; }
		&:last-child { margin-bottom: $trigger-margin; }
	}

	@include flex-grid-row($margin: $trigger-margin);

	> .inner > .accordion-trigger {
		h1,
		h2,
		h3,
		h4,
		h5,
		h6 { margin: 0; }
	}

	> .inner > .accordion-trigger a {
		display: block;
		padding: $trigger-padding;
		position: relative;
		text-decoration: none;
		color: $trigger-color;
		background: $trigger-background;
		font-size: $trigger-font-size;
		font-weight: $fw-normal;
	
		@if $trigger-border-width > 0 and type-of($trigger-border-color) == color {
			border: {
				width: $trigger-border-width;
				style: $trigger-border-style;
				color: $trigger-border-color;
			}
		}
		@if $trigger-icon != "none" { padding-right: calc(#{$trigger-font-size} + 2rem); }
	
		box-shadow: if($feature-shadows,$box-shadow,none);
		border-radius: if($feature-rounded,$border-radius,0);
		transition: if($feature-transitions,$transition-base,none);
		transition-property: color, background;
	
		@if type-of($trigger-background-active) == color {
			&.active,
			&:hover {
				color: $trigger-color-active;
				background: $trigger-background-active;
			}
		}
		@if $trigger-icon == "chevron" or $trigger-icon == "plus" {
			&:after {
				display: block;
				position: absolute;
				right: $spacer;
				top: 50%;
				transform: translateY(-50%);
				content: "";
				height: $trigger-font-size;
				width: $trigger-font-size;
			
				@if $feature-transitions {
					transition: $transition-base;
					transition-property: transform;
				}
			}
		}
	
		@if $trigger-icon == "chevron" {
			&:after {
				// set color in background and cut # from it because # isnt allowed in urls - using %23 as a replacement
				background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" fill="%23#{$svg-color}" viewBox="0 -320 448 256" data-icon="ion-ion-chevron-up" preserveAspectRatio="xMidYMid" id="" class=" "><path d="M224 -234l-174 167c-4 4 -12 4 -16 -0l-31 -30c-4 -4 -4 -12 0 -16l213 -204c2 -2 5 -3 8 -3s6 1 8 3l213 204c4 4 4 12 0 16l-31 30c-4 4 -12 4 -16 -0l-174 -167v-0v-0z"></path></svg>') no-repeat center;
				transform: translateY(-50%) rotate(180deg);
			}
		
			&.active:after { transform: translateY(-50%) rotate(0deg); }
		
			@if type-of($trigger-background-active) == color {
				&.active:after,
				&:hover:after { background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" fill="%23#{$svg-color-active}" viewBox="0 -320 448 256" data-icon="ion-ion-chevron-up" preserveAspectRatio="xMidYMid" id="" class=" "><path d="M224 -234l-174 167c-4 4 -12 4 -16 -0l-31 -30c-4 -4 -4 -12 0 -16l213 -204c2 -2 5 -3 8 -3s6 1 8 3l213 204c4 4 4 12 0 16l-31 30c-4 4 -12 4 -16 -0l-174 -167v-0v-0z"></path></svg>') no-repeat center; }
			}
		}
	
		@if $trigger-icon == "plus" {
			&:after {
				// set color in background and cut # from it because # isnt allowed in urls - using %23 as a replacement
				background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" fill="%23#{$svg-color}" viewBox="0 -320 256 256" data-icon="ion-ion-ios-plus-empty" preserveAspectRatio="xMidYMid" id="" class=" "><path d="M256 -183h-120v119h-17v-119h-119v-17h119v-120h17v120h120v17z"></path></svg>') no-repeat center;
			}
		
			&.active:after { transform: translateY(-50%) rotate(45deg); }
		
			@if type-of($trigger-background-active) == color {
				&.active:after,
				&:hover:after { background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" fill="%23#{$svg-color-active}" viewBox="0 -320 256 256" data-icon="ion-ion-ios-plus-empty" preserveAspectRatio="xMidYMid" id="" class=" "><path d="M256 -183h-120v119h-17v-119h-119v-17h119v-120h17v120h120v17z"></path></svg>') no-repeat center; }
			}
		}
	}

	> .inner > .accordion-content {
		background: $content-background;
		box-shadow: if($feature-shadows,$box-shadow,none);
		border-radius: if($feature-rounded,$border-radius,0);
	
		@if $content-border-width > 0 and type-of($content-border-color) == color {
			border: {
				width: $content-border-width;
				style: $content-border-style;
				color: $content-border-color;
			}
		}
	
		> .inner {
			color: $text-color;
			padding: $content-padding;
		
			p:last-child { margin: 0; }
		}
	}

	// Variants   // normal
	@if $style == "normal" {
		> .inner > .accordion-trigger:not(:first-of-type) { margin-top: $trigger-margin; }
		> .inner > .ed-element:nth-last-child(2) a:not(.active) { margin-bottom: $trigger-margin; }
	
		> .inner > .accordion-content {
			margin-top: $trigger-margin;
			margin-bottom: $trigger-margin;
		}
	}

	@if $style == "columns" {
		> .inner > .accordion-trigger:not(:first-of-type) { margin-top: $trigger-margin; }
		.ed-element:nth-last-child(2) { margin-bottom: $trigger-margin; }
	
		@supports (display: grid) {
			> .inner {
				@media screen and (min-width: $breakpoint-sm) {
					display: grid;
					grid-template-columns: $column-width 1fr;
					grid-column-gap: $column-gap;
				
					> .ed-element.accordion-content {
						margin-top: $trigger-margin;
						margin-bottom: $trigger-margin;
					}
				}
			}
		
			.accordion-trigger { grid-column-start: 1; }
		
			body:not(.edit) & .accordion-content {
				grid-row: 1/24;
				grid-column: 2 / 2;
			}
		}
	}

	@if $style == "tabs" {
		@media screen and (min-width: $breakpoint-sm) {
			> .inner {
				> .ed-element { flex-grow: if($tab-grow,1,0); }
			
				> .ed-element {
					max-width: calc(100% - #{$trigger-margin*2});
					width: auto;
				
					&.accordion-trigger { margin: $trigger-margin; }
					&.accordion-content { margin-bottom: $trigger-margin; }
				}
			}
		
			> .inner {
				display: flex;
			
				> .ed-headline {
					order: -1;
					flex-basis: auto;
				}
			}
		}
	
		@media screen and (max-width: $breakpoint-sm-max) {
			> .inner > .accordion-trigger:not(:first-of-type) { margin-top: $trigger-margin; }
			> .inner > .ed-element:nth-last-child(2) a:not(.active) { margin-bottom: $trigger-margin; }
		
			> .inner > .accordion-content {
				margin-top: $trigger-margin;
				margin-bottom: $trigger-margin;
			}
		}
	}

	// body edit styles	
	.edit & .accordion-trigger,
	.edit & .accordion-content {
		position: relative;
	
		&:before {
			position: absolute;
			z-index: 1;
			top: 0;
			left: -1px;
			content: "Trigger " counter(trigger);
			display: block;
			background: #f58220;
			color: #fff;
			padding: 4px;
			font-size: 12px;
			line-height: 1;
			font-family: Helvetica, sans-serif;
		}
	}

	.edit & .accordion-trigger { counter-increment: trigger; }

	.edit & .accordion-content {
		counter-increment: content;
	
		&:before { content: "Content " counter(content); }
	}
}

/**
 * Slick slider with any type of content for sliding
 * Last Update: 2018-12-03T17:46:00+01:00
 * 
 * @Param("background", type="color", group="slider")
 * @Param("adaptive-height", type="bool", group="slider")
 * @Param("slide-border-width", type="number", options={"units"={"rem", "px"}})
 * @Param("slide-border-style", type="choice", options={"choices"={"solid", "dashed", "dotted", "double"}})
 * @Param("slide-border-color", type="color")
 * @Param("margin", type="number", options={"units"={"px","rem"}}) 
 * @Param("arrows", type="bool", group="icon")
 * @Param("arrow-size", type="number", options={"units"={"rem", "px"}}, group="icon")
 * @Param("arrow-color", type="color", group="icon")
 * @Param("arrow-background", type="color", group="icon")
 * @Param("arrow-circle", type="bool", group="icon")
*/
@mixin content-slider(
	$background: none, 
	$adaptive-height: true, 
	$slide-border-width: 1px, 
	$slide-border-style: solid, 
	$slide-border-color: $gray-lightest, 
	$margin: 0rem, 
	$arrows: true, 
	$arrow-size: 2.5rem, 
	$arrow-color: none, 
	$arrow-background: $color-primary, 
	$arrow-circle: false
) {
	$headline-color: prioritize-color($color: $color-headlines, $background: $background);
	$text-color: color-contrast($background, $color-background, $color-default);
	$arrow-color-check: if(type-of($arrow-color) == color,$arrow-color,color-contrast($arrow-background, $color-background, $color-primary, $color-default));

	> .inner {
		@if $arrows {
			padding-left: $spacer;
			padding-right: $spacer;
		
			@media screen and (min-width: $breakpoint-xs) {
				padding-left: calc(#{$arrow-size} + #{$spacer});
				padding-right: calc(#{$arrow-size} + #{$spacer});
			}
		}
	}

	counter-reset: slide;
	// If this container is inside another container, revert all paddings
	.ed-container & {
		background: none;
	
		> .inner {
			padding: 0;
			background: none;
		
			@if $arrows {
				@media screen and (min-width: $breakpoint-xs) {
					padding-left: $arrow-size;
					padding-right: $arrow-size;
				}
			}
		}
	}

	p { margin: 0; }

	// Every element inside the parent container becomes a slide
	> .inner > .ed-element,
	.slick-track > .ed-element {
		margin: $margin;
		counter-increment: slide;
	
		@if $slide-border-width > 0 or type-of($background) == color {
			background: $background;
		
			border: {
				width: $slide-border-width;
				style: $slide-border-style;
				color: $slide-border-color;
			}
		
			padding: $spacer;
		}
	
		@if type-of($background) == color {
			color: $text-color;
		
			h1,
			h2,
			h3,
			h4,
			h5,
			h6 { color: $headline-color; }
		}
	
		@if $feature-rounded { border-radius: $border-radius; }
		@if $feature-shadows { box-shadow: 0 10px 6px -6px $gray-lighter; }
	
		.edit & {
			border: 1px solid #f58220;
			position: relative;
		
			&:before {
				position: absolute;
				z-index: -1;
				top: 0;
				left: -1px;
				content: "Slide " counter(slide);
				display: block;
				background: #f58220;
				color: #fff;
				padding: 4px;
				font-size: 12px;
				line-height: 1;
				font-family: Helvetica, sans-serif;
			}
		}
	}

	// FIX: IE11 doesn't show the content before first round of sliding started
	@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
		.slick-list { min-width: 100%; }
	}

	// Slick styling
	.slick-slider {
		.slick-track {
			@if not $adaptive-height {
				display: flex;
				align-items: center;
			}
		}
	}

	.ed-slider { max-width: 100%; }
	.slick-dots {
		button { padding: 0; }
	}

	.slick-arrow {
		font-size: 0;
		line-height: 0;
	}

	@if $arrows {
		.slick-arrow {
			display: none !important;
			width: $arrow-size;
			height: $arrow-size;
			line-height: $arrow-size;
			text-align: center;
			font-size: $arrow-size/2;
			padding: 0;
			background-color: if(type-of($arrow-background) == color,rgba($arrow-background, 0.75),transparent);
			color: $arrow-color-check;
			opacity: 1;
			border-radius: 0;
			top: 0;
			bottom: 0;
			margin: auto;
			box-shadow: if($feature-shadows,$box-shadow,none);
			border-radius: if($arrow-circle,50%,if($feature-rounded,$border-radius,0));
		
			@media screen and (min-width: $breakpoint-xs) {
				display: block !important;
			}
		
			@if $feature-transitions {
				transition: $transition-base;
				transition-property: background-color;
			}
		
			&.slick-prev {
				left: $spacer;
			
				.ed-container & { left: 0; }
			}
		
			&.slick-next {
				right: $spacer;
			
				.ed-container & { right: 0; }
			}
		
			&:hover { background-color: $arrow-background; }
		}
	}
}

/**
 * section dividers - svg with colors
 * Last Update: 2018-12-03T17:45:26+01:00
 *
 * @Param("background", type="color", group="container")
 * @Param("height-desktop", type="number", options={"units"={"rem", "px"}}, group="container")
 * @Param("height-mobile", type="number", options={"units"={"rem", "px"}}, group="container")
 * @Param("separator-style", type="choice", options={"choices"={"triangle", "zigzag", "circle", "diagonal", "square", "polygon1", "polygon2"}}, group="separator")
 * @Param("color-separator", type="color", group="separator")
 * @Param("color-separator-secondary", type="color", group="separator")
 * @Param("flip-horizontal", type="bool", group="separator")
 * @Param("flip-vertical", type="bool", group="separator")
*/
@mixin separator(
	$background: $color-background, 
	$height-desktop: 5rem, 
	$height-mobile: 2rem, 
	$separator-style: triangle, 
	$color-separator: #f0f0f0, 
	$color-separator-secondary: rgba($color-default,0.1), 
	$flip-horizontal: false, 
	$flip-vertical: false
) {
	.separator-container {
		background: $background;
		height: $height-mobile;
		overflow: hidden;
	
		@media screen and (min-width: $breakpoint-md) {
			height: $height-desktop;
		}
	}

	transform: if($flip-vertical,rotate(180deg),rotate(0)) if($flip-horizontal,scaleX(-1),scaleX(1));

	svg {
		overflow: hidden;
		height: 100%;
		width: 100%;
		display: none;
	
		@if $separator-style == "triangle" {
			&.double-triangle { display: block; }
		}
		@if $separator-style == "circle" {
			&.circle { display: block; }
		}
		@if $separator-style == "polygon1" {
			&.polygon1 { display: block; }
		}
	}

	.path1 { fill: if(type-of($color-separator) == color,$color-separator,none); }

	.path2,
	.path3 { fill: if(type-of($color-separator-secondary) == color,$color-separator-secondary,none); }

	@if $separator-style == "zigzag" {
		.separator-container {
			position: relative;
		
			&:after {
				@include fake-element;
			
				background-image: linear-gradient(135deg, $color-separator 25%, transparent 25%), linear-gradient(225deg, $color-separator 25%, transparent 25%);
				background-position: 50%;
				background-size: $height-mobile 100%;
			
				@media screen and (min-width: $breakpoint-md) {
					height: $height-desktop;
					background-size: $height-desktop 100%;
				}
			}
		}
	}
	@if $separator-style == "diagonal" or $separator-style == "polygon2" {
		.separator-container {
			position: relative;
		
			&:after {
				@include fake-element;
			
				background: $color-separator;
			
				@if $separator-style == "diagonal" { clip-path: polygon(100% 0, 0% 100%, 100% 100%); }
				@if $separator-style == "polygon2" { clip-path: polygon(65% 72%, 100% 0, 100% 100%, 0 100%, 25% 12%); }
			}
		}
	}
	@if $separator-style == "square" {
		.separator-container {
			// get diagonal of square and use as height
			$sqrt: 1.45;
		
			height: $sqrt * $height-mobile;
		
			@media screen and (min-width: $breakpoint-md) {
				height: $sqrt * $height-desktop;
			}
		
			&:after {
				@include fake-element;
			
				width: $height-mobile;
				height: $height-mobile;
				background: $color-separator;
				top: 50%;
				left: 50%;
				transform: translate(-50%,-50%) rotate(45deg);
			
				@media screen and (min-width: $breakpoint-md) {
					width: $height-desktop;
					height: $height-desktop;
				}
			}
		}
	}
}

/**
 * Footer "Hel" - two rwos with form 
 * Last Update: 2018-12-10T15:29:02+01:00
 * 
 * @Param("background", type="color", group="container")
 * @Param("margin", type="number", options={"units"={"rem"}}, group="container")
 * @Param("icon-color", type="color", group="container")
 * @Param("input-background", type="color", group="input")
 * @Param("input-border-width", type="number", options={"units"={"px","em","rem"}}, group="input")
 * @Param("input-border-style", type="choice", options={"choices"={"solid","dotted","dashed", "double"}}, group="input")
 * @Param("input-border-color", type="color", group="input")
 * @Param("input-placeholder", type="color", group="input")
 * @Param("input-submit-background", type="color", group="input")
 * @Param("horizontal-checkbox", type="bool", group="input")
 * @Param("horizontal-radio", type="bool", group="input") */
@mixin footer-hel(
	$background: $color-secondary, 
	$margin: $padding-vertical, 
	$icon-color: none, 
	$input-background: none, 
	$input-border-width: 1px, 
	$input-border-style: solid, 
	$input-border-color: none, 
	$input-placeholder: none, 
	$input-submit-background: none, 
	$horizontal-checkbox: false, 
	$horizontal-radio: false
) {
	%item-horizontal {
		li {
			display: inline-block;
			margin-right: 1rem;
		}
	}

	$background-check: first-color($background, $color-background);
	$text-color: color-contrast($background-check, $color-default, $color-background);
	$headline-color: prioritize-color($color: $color-headlines, $background: $background-check);
	$icon-color: if(type-of($icon-color) == color, $icon-color, $headline-color);

	@if $input-border-color == none {
		$input-border-color: $text-color;
	}

	$icon-width: $fz-base * 1.6;

	$input-background-check: first-color($input-background, $background-check);
	$input-color: color-contrast($input-background-check, $color-default, $color-background);
	$input-submit-background-check: if(type-of($input-submit-background) == color,$input-submit-background,$headline-color);

	background: $background;
	// Formular
	form {
		display: flex;
		flex-flow: row wrap;
		justify-content: stretch;
	
		> .ed-element {
			margin: $padding-vertical;
			flex: 1 1 100%;
		
			@media screen and (min-width: $breakpoint-xs) {
				flex-basis: 40%;
			}
		
			&.ed-form-textarea,
			&.ed-form-captcha,
			&.ed-form-button { flex-basis: 100%; }
		}
	
		input[type="checkbox"],
		input[type="radio"] { vertical-align: middle; }
	
		input[type="text"],
		input[type="number"],
		input[type="email"],
		input[type="phone"],
		select,
		textarea {
			background: $input-background;
			color: $input-color;
			padding: $padding-vertical $padding-horizontal;
			line-height: $lh-base;
			font-family: $font-default;
			font-weight: $fw-base;
		
			@if $input-border-width > 0 {
				border: {
					width: $input-border-width;
					style: $input-border-style;
					color: $input-border-color;
				}
			}
			@else  { border: none; }
		
			&:not(select) { -webkit-appearance: none; }
		
			@if $feature-rounded { border-radius: $border-radius; }
			@if $feature-shadows { box-shadow: $box-shadow; }
		
			&:focus { outline: 0; }
		
			&::placeholder {
				@if type-of($input-placeholder) == "color" { color: $input-placeholder; }
				@else  { color: rgba($input-color, 0.85); }
			}
		}
	
		input[type=file] {
			white-space: nowrap;
			overflow: hidden;
			text-overflow: ellipsis;
			width: 250px;
		}
	
		select[multiple] {
			height: auto;
			appearance: menulist;
		}
	
		@if $horizontal-checkbox {
			ul.checkbox_list {
				@extend %item-horizontal;
			}
		}
		@if $horizontal-radio {
			ul.radio_list {
				@extend %item-horizontal;
			}
		}
	
		.ed-form-captcha {
			flex-wrap: wrap;
			// limit captcha width to 100px on small displays, so all captcha controls fit into one line
			@media screen and (max-width: $breakpoint-xs) {
				img { max-width: 100px; }
			}
		
			input[type="text"] { text-transform: none; }
		}
	
		button[type="submit"] {
			transition: $transition-base;
			transition-property: background-color, color;
			border-radius: 0;
			border: none;
			line-height: 40px;
			padding: 0 10px;
			background: $input-submit-background-check;
			color: color-contrast($input-submit-background-check, $color-background, $color-default, $white);
			font-size: $fz-base;
			box-sizing: border-box;
			width: 100%;
			-webkit-appearance: none;
			text-shadow: none;
			vertical-align: top;
		
			@if $feature-rounded == true { border-radius: $border-radius; }
		
			&:hover {
				background: darken($input-submit-background-check, 5%);
				color: color-contrast($input-submit-background-check, $color-background, $color-default, $white);
			}
		}
	}

	.footer-hel-content {
		justify-content: center;
		align-items: center;
		align-content: center;
	
		> .inner {
			margin: -$margin;
			padding-left: $spacer;
			padding-right: $spacer;
			width: calc(100% + #{2*$margin});
		}
	
		&.wv-boxed > .inner { max-width: calc(#{$breakpoint-md} + #{2*$margin}); }
	
		.footer-hel-box {
			margin: $margin;
			flex-basis: calc(100% - #{$margin * 2});
		
			@media screen and (min-width: $breakpoint-sm) {
				flex-basis: calc(50% - #{2*$margin});
			}
			@media screen and (max-width: $breakpoint-sm-max) {
				&:first-child { margin-bottom: $spacer * 2; }
			}
		}
	}

	&,
	a { color: $text-color; }

	p {
		margin-bottom: $padding-vertical;
		margin-left: $icon-width;
	
		&:last-child { margin-bottom: 0; }
	}

	i {
		color: $icon-color;
		text-align: center;
		font-size: $fz-base;
		width: $icon-width;
		margin-left: - $icon-width;
		position: relative;
	}

	h1,
	h2,
	h3,
	h4,
	h5,
	h6 {
		margin: 0;
		line-height: 1;
		margin-bottom: $padding-vertical;
		color: $headline-color;
	}

	.ed-headline > h3 {
		font-size: $fz-base;
		margin-bottom: $spacer;
		color: $text-color;
	}

	.ed-map {
		color: $color-default;
	
		@if $feature-shadows == true {
			overflow: hidden;
			position: relative;
		
			$shadow-size: 50px;
		
			&:after {
				@include fake-element;
			
				top: -$shadow-size;
				height: $shadow-size;
				box-shadow: 0 0 $shadow-size #000;
			}
		}
	}
}

/**
 * Last Update: 2018-12-04T15:20:56+01:00
 *
 * @Param("icon-color", type="color", group="icon")
 * @Param("icon-color-active", type="color", group="icon")
 * @Param("icon-background", type="color", group="icon")
 * @Param("icon-background-active", type="color", group="icon")
 * @Param("icon-border-width", type="number", options={"units"={"rem", "px"}}, group="icon")
 * @Param("icon-border-style", type="choice", options={"choices"={"solid", "dashed", "dotted", "double"}}, group="icon")
 * @Param("icon-border-color", type="color", group="icon") 
 * @Param("icon-border-color-active", type="color", group="icon") 
 * @Param("icon-padding", type="number", options={"units"={"rem"}}, group="icon")
 * @Param("icon-circle", type="bool", group="icon")
 * @Param("social-icon-size", type="number", options={"units"={"rem"}}, group="icon") 
 * @Param("margin", type="number", options={"units"={"rem"}}, group="container")
 * @Param("fixed", type="bool", group="container")
 * @Param("fixed-position", type="choice", options={"choices"={"right", "left"}}, group="container")
*/
@mixin social-icons(
	$icon-color: none, 
	$icon-color-active: none, 
	$icon-background: $color-primary, 
	$icon-background-active: $color-default, 
	$icon-border-width: 0px, 
	$icon-border-style: solid, 
	$icon-border-color: $color-secondary, 
	$icon-border-color-active: $color-primary, 
	$icon-padding: $padding-vertical, 
	$icon-circle: false, 
	$social-icon-size: 1rem, 
	$margin: $padding-vertical, 
	$fixed: false, 
	$fixed-position: right
) {
	$icon-background-check: first-color($icon-background, $color-background);
	$icon-background-active-check: first-color($icon-background-active, $icon-background, $color-background);
	$icon-color: if(type-of($icon-color) == color,$icon-color,color-contrast($icon-background-check, $color-background, $color-default, $color-primary));
	$icon-color-active: if(type-of($icon-color-active) == color,$icon-color-active,color-contrast($icon-background-active-check, $color-background, $color-default, $color-primary));

	> .inner {
		margin: -$margin;
		width: auto;
	}

	@if $fixed {
		position: fixed;
		top: 50%;
		transform: translateY(-50%);
		z-index: 99;
	
		@if $fixed-position == "right" { right: 0; }
		@else if $fixed-position == "left" { left: 0; }
	
		> .inner {
			flex-direction: column;
			flex-wrap: wrap;
		}
	}

	.social-icon {
		flex-basis: auto;
		margin: $margin;
	
		a {
			background: $icon-background;
			display: block;
			text-align: center;
			box-shadow: if($feature-shadows,$box-shadow,none);
			border-radius: if($icon-circle,50%,if($feature-rounded,$border-radius,0));
			transition: $transition-base;
		
			@if $icon-border-width > 0 and type-of($icon-border-color) == color {
				border: {
					width: $icon-border-width;
					style: $icon-border-style;
					color: $icon-border-color;
				}
			}
		
			svg {
				fill: $icon-color;
				width: $social-icon-size;
				height: $social-icon-size;
				display: block;
				transition: $transition-base;
			}
		
			&:hover,
			&.active {
				background: $icon-background-active;
			
				@if $icon-border-width > 0 and type-of($icon-border-color-active) == color { border-color: $icon-border-color-active; }
			
				svg { fill: $icon-color-active; }
			}
		
			@if type-of($icon-background) == color or $icon-border-width > 0 and type-of($icon-border-color-active) == color { padding: $icon-padding; }
		}
	}
}

/**
 * Imprint back button with background-color and animation if enabled
 * Last Update: 2018-12-03T17:48:00+01:00
 *
 * @Param("background", type="color", group="container")
 * @Param("button-background", type="color", group="container")
 * @Param("button-padding", type="number", options={"units"={"rem"}}, group="container")
 * @Param("color", type="color", group="container") 
 */
@mixin back-button(
	$background: $color-primary, 
	$button-background: none, 
	$button-padding: 0, 
	$color: #fff
) {
	background: $background;

	> .inner {
		padding-top: $spacer;
		padding-bottom: $spacer;
	}

	a.button {
		background: $button-background;
		padding: $button-padding;
	
		&,
		&:hover {
			color: $color;
			text-decoration: none;
		}
	
		&:hover {
			@if $feature-animations {
				i { transform: translate3d(10%,0,0); }
			}
		}
	
		i {
			margin-right: $spacer;
		
			@if $feature-animations {
				transition: all .2s ease-out;
				transform: translate3d(0,0,0);
			}
		}
	}
}

/**
 * Slick slider with any type of content for sliding
 * Last Update: 2021-04-28T10:22:32+02:00
 * 
 * @Param("background", type="color", group="slider")
 * @Param("margin", type="number", options={"units"={"px", "rem", "%", "vh", "vw"}, "responsive"=1}, group="slider") 
 * @Param("box-padding", type="number", options={"units"={"px", "rem", "%", "vh", "vw"}, "responsive"=1}, group="slider")
 * @Param("border-style-primary", type="choice", options={"choices"={"none", "solid", "dashed", "dotted", "double"}, "expanded"=1}, group="slider")
 * @Param("border-width-primary", type="spacing", visibility={"border-style-primary"={"solid", "dashed", "dotted", "double"}}, options={"units"={"px", "rem", "%", "vh", "vw"}, "responsive"=1}, group="slider")
 * @Param("border-color-primary", type="color", visibility={"border-style-primary"={"solid", "dashed", "dotted", "double"}}, group="slider")
 * @Param("border-radius-primary", type="border-radius", options={"units"={"px", "rem", "%", "vh", "vw"}, "responsive"=1}, group="slider")
 * @Param("arrow-color", type="color", options={"width"=60}, group="arrow_slider")
 * @Param("arrow-color-hover", type="color", options={"width"=40}, group="arrow_slider")
 * @Param("arrow-background", type="color", options={"width"=60}, group="arrow_slider")
 * @Param("arrow-background-hover", type="color", options={"width"=40}, group="arrow_slider")
 * @Param("arrow-size", type="number", options={"units"={"px", "rem", "vh", "vw"}, "width"=50, "responsive"=1}, group="arrow_slider")
 * @Param("arrow-font-size", type="number", options={"units"={"px", "rem", "vh", "vw"},"width"=50, "responsive"=1}, group="arrow_slider")
 * @Param("arrow-icon", type="choice", options={"choices"={"thin_icon", "thick_icon", "long_icon"}, "expanded"=1}, group="arrow_slider")
 * @Param("arrow-position", type="choice", options={"choices"={"inside", "outside"}, "expanded"=1, "responsive"=1}, group="arrow_slider")
 * @Param("arrow-space", type="number", options={"units"={"px", "rem", "%", "vh", "vw"}, "responsive"=1}, group="arrow_slider") 
 * @Param("arrow-style", type="choice", options={"choices"={"centered", "top", "bottom", "diagonal", "full-height", "half-width"}, "separator"=1}, group="arrow_slider")
 * @Param("border-style-secondary", type="choice", options={"choices"={"none", "solid", "dashed", "dotted", "double"}, "expanded"=1}, group="arrow_slider")
 * @Param("border-width-secondary", type="spacing", visibility={"border-style-secondary"={"solid", "dashed", "dotted", "double"}}, options={"units"={"px", "rem", "vh", "vw"}, "responsive"=1}, group="arrow_slider")
 * @Param("border-color-secondary", type="color", visibility={"border-style-secondary"={"solid", "dashed", "dotted", "double"}}, group="arrow_slider")
 * @Param("border-radius-secondary", type="border-radius", options={"units"={"px", "rem", "%", "vh", "vw"}, "responsive"=1}, group="arrow_slider")
 * @Param("extended-trigger-settings", type="bool", group="arrow_slider")
 * @Param("arrows-show-on-hover", type="choice", visibility={"extended-trigger-settings" : true}, options={"choices"={"default", "hover_only"}, "expanded"=1}, group="arrow_slider")
 * @Param("arrows-show-on-mobile", type="choice", visibility={"extended-trigger-settings" : true}, options={"choices"={"none_default", "show"}, "expanded"=1},  group="arrow_slider")
 * @Param("box-shadow-primary", type="shadow", visibility={"extended-trigger-settings" : true}, options={"responsive"=1}, group="arrow_slider") 
 * @Param("dots-color", type="color",options={"width"=50}, group="dots")
 * @Param("dots-color-active", type="color",options={"width"=50}, group="dots")
 * @Param("dots-width", type="number", options={"units"={"px", "rem", "vh", "vw"}, "width"=50, "responsive"=1}, group="dots")
 * @Param("dots-height", type="number", options={"units"={"px", "rem", "vh", "vw"}, "width"=50, "responsive"=1}, group="dots")
 * @Param("dots-margin", type="number", options={"units"={"px", "rem", "%", "vh", "vw"}, "responsive"=1}, group="dots")
 * @Param("dots-position", type="choice", options={"choices"={"inside", "outside"}, "expanded"=1, "responsive"=1}, group="dots")
 * @Param("dots-space", type="number", options={"units"={"px", "rem", "%", "vh", "vw"}, "responsive"=1}, group="dots")
 * @Param("border-radius-tertiary", type="border-radius", options={"units"={"px", "rem", "%", "vh", "vw"}, "responsive"=1}, group="dots")
*/
@mixin slider-content-v3(
	$background: $gray-lightest, 
	$margin: 0rem, 
	$box-padding: 1rem, 
	$border-style-primary: none, 
	$border-width-primary: 1px, 
	$border-color-primary: $color-primary, 
	$border-radius-primary: 0px, 
	$arrow-color: none, 
	$arrow-color-hover: none, 
	$arrow-background: $color-secondary, 
	$arrow-background-hover: $color-primary, 
	$arrow-size: 2.5rem, 
	$arrow-font-size: 1.25rem, 
	$arrow-icon: thin_icon, 
	$arrow-position: outside, 
	$arrow-space: 1rem, 
	$arrow-style: centered, 
	$border-style-secondary: none, 
	$border-width-secondary: 1px, 
	$border-color-secondary: $color-primary, 
	$border-radius-secondary: 0px, 
	$extended-trigger-settings: false, 
	$arrows-show-on-hover: default, 
	$arrows-show-on-mobile: none_default, 
	$box-shadow-primary: none, 
	$dots-color: $gray-lighter, 
	$dots-color-active: $color-primary, 
	$dots-width: 12px, 
	$dots-height: 12px, 
	$dots-margin: 6px, 
	$dots-position: outside, 
	$dots-space: 1rem, 
	$border-radius-tertiary: 50%
) {
	$margin-lg: nth(inherit-list($margin),1);
	$margin-md: nth(inherit-list($margin),2);
	$margin-xs: nth(inherit-list($margin),3);

	$arrow-position-lg: nth(inherit-list($arrow-position),1);
	$arrow-position-md: nth(inherit-list($arrow-position),2);
	$arrow-position-xs: nth(inherit-list($arrow-position),3);
	$arrow-size-lg: nth(inherit-list($arrow-size),1);
	$arrow-size-md: nth(inherit-list($arrow-size),2);
	$arrow-size-xs: nth(inherit-list($arrow-size),3);
	$arrow-font-size-lg: nth(inherit-list($arrow-font-size),1);
	$arrow-font-size-md: nth(inherit-list($arrow-font-size),2);
	$arrow-font-size-xs: nth(inherit-list($arrow-font-size),3);
	$arrow-space-lg: nth(inherit-list($arrow-space),1);
	$arrow-space-md: nth(inherit-list($arrow-space),2);
	$arrow-space-xs: nth(inherit-list($arrow-space),3);

	$border-width-primary-lg: nth(inherit-list($border-width-primary),1);
	$border-width-primary-md: nth(inherit-list($border-width-primary),2);
	$border-width-primary-xs: nth(inherit-list($border-width-primary),3);

	$dots-position-lg: nth(inherit-list($dots-position),1);
	$dots-position-md: nth(inherit-list($dots-position),2);
	$dots-position-xs: nth(inherit-list($dots-position),3);

	$background-check: first-color($background, $color-background);
	$background-outside-check: first-color($color-default, $color-background);

	/* Arrows color check*/
	$arrow-background-check: first-color($arrow-background,  $color-background, preset-accent-color($background-check));
	$arrow-outside-background-check: first-color($arrow-background-hover, preset-accent-color($color-background));
	$arrow-color-check: first-color($arrow-color, color-contrast($arrow-background-check, $color-background, $color-primary, $color-default));
	$arrow-color-hover: first-color($arrow-color-hover,color-contrast($arrow-outside-background-check, $color-background, $color-primary, $color-default), preset-text-color($arrow-background-check));
	$arrow-background-hover: first-color($arrow-background-hover, preset-accent-color($background-check));
	$arrow-background: first-color($arrow-background, rgba($arrow-background-hover, 0.75));

	/*Dots color check */
	$dots-color-check: first-color($dots-color, preset-text-color($background-check));
	$dots-outside-color-check: first-color($dots-color, preset-text-color($color-background));

	/* Dots color when position inside */
	$dots-inside-color: first-color($dots-color, rgba($dots-color-check, 0.75));
	$dots-inside-color-active: first-color($dots-color-active, $dots-color-check);

	/* Dots color when position outside */
	$dots-color: first-color($dots-color, rgba($dots-outside-color-check, 0.75));
	$dots-color-active: first-color($dots-color-active, $dots-outside-color-check);

	$text-color: preset-text-color($background-check);

	/* ARROWS & DOTS POSITION */
	> .inner {
		//ARROWS
		padding-left: $spacer;
		padding-right: $spacer;
	
		@media screen and (min-width: $breakpoint-md-max) {
			@if nth($arrow-position-lg,1) == "outside" {
				width: calc(100% - (#{$spacer} + #{$arrow-size-lg}));
				padding-left: $arrow-size-lg;
				padding-right: $arrow-size-lg;
			}
		
			@if nth($arrow-position-lg,1) == "inside" {
				padding-left: 0;
				padding-right: 0;
				width: 100%;
			}
		
			@if $arrow-style == "half-width" {
				width: calc(100% - #{$spacer} );
				padding-left: 0;
				padding-right: 0;
			}
		}
	
		@media screen and (max-width: $breakpoint-md-max) {
			@if nth($arrow-position-md,1) == "inisde" {
				padding-left: $spacer;
				padding-right: $spacer;
			}
		
			@if nth($arrow-position-md,1) == "outside" {
				width: calc(100% - (#{$spacer} * 2));
				padding-left: calc(#{$spacer} + #{$arrow-size-md});
				padding-right: calc(#{$spacer} + #{$arrow-size-md});
			}
		
			@if $arrow-style == "half-width" and nth($arrow-position-md,1) == "outside" {
				width: 100%;
				padding-left: $spacer;
				padding-right: $spacer;
			}
		}
	
		@media screen and (max-width: $breakpoint-sm-max) {
			width: 100%;
			padding-left: 0;
			padding-right: 0;
		
			@if $arrows-show-on-mobile == "none_default" {
				padding-left: $spacer;
				padding-right: $spacer;
			
				@if $arrow-style == "half-width" and nth($arrow-position-xs,1) == "outside" {
					padding-left: $spacer;
					padding-right: $spacer;
				}
			}
		
			@if $arrows-show-on-mobile == "show" {
				@if nth($arrow-position-xs,1) == "outside" {
					width: calc(100% - #{$spacer});
					padding-left: calc(#{$arrow-size-xs} + #{$spacer}); //$arrow-size-xs;
					padding-right: calc(#{$arrow-size-xs} + #{$spacer});
				}
			
				@if nth($arrow-position-xs,1) == "inside" {
					width: 100%;
					padding-left: $spacer;
					padding-right: $spacer;
				}
			
				@if $arrow-style == "half-width" and nth($arrow-position-xs,1) == "outside" {
					width: 100%;
					padding-left: $spacer;
					padding-right: $spacer;
				}
			}
		}
	
		.has-dots { padding-bottom: 0; }
	}

	//Fix for container inside the slider
	.ed-content-slider .ed-container { box-sizing: border-box; }
	.ed-content-slider { max-width: 100%; }
	.slider-container { overflow: visible; }

	// If this container is inside another container, revert all paddings
	.ed-container & {
		background: none;
	
		> .inner {
			padding: 0;
			background: none;
		
			@media screen and (min-width: $breakpoint-md-max) {
				@if nth($arrow-position-lg,1) == "outside" { width: calc(100% - #{$arrow-size-lg}); }
			}
		
			@if nth($arrow-position-lg,1) == "outside" {
				padding-left: $arrow-size-lg;
				padding-right: $arrow-size-lg;
			}
		
			@if nth($arrow-position-lg,1) == "inside" {
				padding-left: 0;
				padding-right: 0;
			}
		
			@if $arrow-style == "half-width" {
				@if nth($arrow-position-lg,1) == "outside" {
					padding-left: 0;
					padding-right: 0;
				}
			}
		
			@media screen and (max-width: $breakpoint-md-max) {
				@if nth($arrow-position-md,1) == "outside" {
					width: calc(100% - (#{$spacer} * 2));
					padding-left: $arrow-size-md;
					padding-right: $arrow-size-md;
				}
			
				@if nth($arrow-position-md,1) == "inside" {
					padding-left: 0;
					padding-right: 0;
				}
			
				@if $arrow-style == "half-width" {
					@if nth($arrow-position-md,1) == "outside" {
						padding-left: 0;
						padding-right: 0;
					}
				}
			}
		
			@media screen and (max-width: $breakpoint-sm-max) {
				width: 100%;
				padding-left: 0;
				padding-right: 0;
			
				@if $arrows-show-on-mobile == "show" {
					@if nth($arrow-position-xs,1) == "outside" {
						width: calc(100% - (#{$spacer} * 2));
						padding-left: $arrow-size-xs;
						padding-right: $arrow-size-xs;
					}
				
					@if nth($arrow-position-xs,1) == "inside" {
						width: 100%;
						padding-left: 0;
						padding-right: 0;
					}
				}
			
				@if $arrow-style == "half-width" {
					@if nth($arrow-position-xs,1) == "outside" {
						width: 100%;
						padding-left: 0;
						padding-right: 0;
					}
				}
			}
		}
	}

	.ed-content-slider {
		.slider-container { overflow: visible; }
	
		.slick-track > * {
			margin-left: $margin-lg;
			margin-right: $margin-lg;
		
			@include media-constructor(max-width, extend-constructor('calc(100% - (', $arrow-size, ' *2))'));
			@include media-constructor(padding, $box-padding);
		
			background: $background;
		
			@include media-constructor(border-width, $border-width-primary);
			@include media-constructor(border-radius, $border-radius-primary);
		
			border: {
				style: $border-style-primary;
				color: $border-color-primary;
			}
		
			@if type-of($background) == color {
				@include preset-headline-color($background-check);
			
				&,
				.ed-element:not(.ed-button) > a { color: $text-color; }
			}
		
			@media screen and (max-width:$breakpoint-md-max) {
				margin-left: $margin-md;
				margin-right: $margin-md;
			}
		
			@media screen and (max-width:$breakpoint-sm-max) {
				margin-left: $margin-xs;
				margin-right: $margin-xs;
			}
		}
	}

	// FIX: IE11 doesn't show the content before first round of sliding started
	@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
		.slick-list { min-width: 100%; }
	}

	.slick-dots {
		button { padding: 0; }
	}

	/* STYLING FOR THE ARROWS */
	.slick-arrow {
		display: flex;
		justify-content: center;
		align-items: center;
		outline: none;
	
		@include media-constructor(width, $arrow-size);
		@include media-constructor(height, $arrow-size);
	
		text-align: center;
	
		@include media-constructor(font-size, $arrow-font-size);
	
		background-color: $arrow-background-check;
		color: $arrow-color-check;
		opacity: 1;
		top: 0;
		bottom: 0;
		margin: auto;
		line-height: 1;
		//Border
		@include media-constructor(border-width, $border-width-secondary);
		@include media-constructor(border-radius, $border-radius-secondary);
	
		border: {
			style: $border-style-secondary;
			color: $border-color-secondary;
		}
	
		//Box Shadow
		@include media-constructor(box-shadow, $box-shadow-primary);
	
		transition: $transition-base;
	
		&.slick-prev,
		&.slick-next { padding-bottom: 2px; }
	
		&.slick-prev {
			@if nth($arrow-position-lg,1) == "inside" { left: calc(#{$margin-lg} + #{$arrow-space-lg}); }
			@else if nth($arrow-position-lg,1) == "outside" {
				@include media-constructor(left, extend-constructor('calc(-', $arrow-size-lg, ' - '), extend-constructor('', $arrow-space-lg ,')'));
			}
		
			@media screen and (max-width:$breakpoint-md-max) {
				@if nth($arrow-position-md,1) == "inside" { left: calc(#{$margin-md} + #{$arrow-space-md}); }
				@else if nth($arrow-position-md,1) == "outside" {
					@include media-constructor(left, extend-constructor('calc(-', $arrow-size-md, ' - '), extend-constructor('', $arrow-space-md ,')'));
				}
			}
		
			@media screen and (max-width:$breakpoint-sm-max) {
				@if nth($arrow-position-xs,1) == "inside" { left: calc(#{$margin-xs} + #{$arrow-space-xs}); }
				@else if nth($arrow-position-xs,1) == "outside" {
					@include media-constructor(left, extend-constructor('calc(-', $arrow-size-xs, ' - '), extend-constructor('', $arrow-space-xs ,')'));
				}
			}
		}
	
		&.slick-next {
			@if nth($arrow-position-lg,1) == "inside" { right: calc(#{$margin-lg} + #{$arrow-space-lg}); }
			@else if nth($arrow-position-lg,1) == "outside" {
				@include media-constructor(right, extend-constructor('calc(-', $arrow-size-lg, ' - '), extend-constructor('', $arrow-space-lg ,')'));
			}
		
			@media screen and (max-width:$breakpoint-md-max) {
				@if nth($arrow-position-md,1) == "inside" { right: calc(#{$margin-md} + #{$arrow-space-md}); }
				@else if nth($arrow-position-md,1) == "outside" {
					@include media-constructor(right, extend-constructor('calc(-', $arrow-size-md, ' - '), extend-constructor('', $arrow-space-md ,')'));
				}
			}
		
			@media screen and (max-width:$breakpoint-sm-max) {
				@if nth($arrow-position-xs,1) == "inside" { right: calc(#{$margin-xs} + #{$arrow-space-xs}); }
				@else if nth($arrow-position-xs,1) == "outside" {
					@include media-constructor(right, extend-constructor('calc(-', $arrow-size-xs, ' - '), extend-constructor('', $arrow-space-xs ,')'));
				}
			}
		}
	
		@if $arrow-style == "half-width" {
			&.slick-prev,
			&.slick-next {
				@if nth($arrow-position-lg,1) == "inside" { bottom: calc(#{$margin-lg} + #{$arrow-space-lg}); }
				@else if nth($arrow-position-lg,1) == "outside" {
					@include media-constructor(bottom, extend-constructor('calc(-', $arrow-size-lg, ' - '), extend-constructor('', $arrow-space-lg ,')'));
				}
			
				@media screen and (max-width:$breakpoint-md-max) {
					@if nth($arrow-position-md,1) == "inside" { bottom: calc(#{$margin-md} + #{$arrow-space-md}); }
					@else if nth($arrow-position-md,1) == "outside" {
						@include media-constructor(bottom, extend-constructor('calc(-', $arrow-size-md, ' - '), extend-constructor('', $arrow-space-md ,')'));
					}
				}
			
				@media screen and (max-width:$breakpoint-sm-max) {
					@if nth($arrow-position-xs,1) == "inside" { bottom: calc(#{$margin-xs} + #{$arrow-space-xs}); }
					@else if nth($arrow-position-xs,1) == "outside" {
						@include media-constructor(bottom, extend-constructor('calc(-', $arrow-size-xs, ' - '), extend-constructor('', $arrow-space-xs ,')'));
					}
				}
			}
		}
	
		&:hover {
			background-color: $arrow-background-hover;
			color: $arrow-color-hover;
		}
	}

	/*##################################
																					     SHOW/HIDE on hover -Beginn
																					##################################*/
	@if $arrows-show-on-hover == "hover_only" {
		.edit &,
		.preview & {
			> .inner {
				&:before,
				&:after {
					opacity: 0;
					visibility: hidden;
					transition: $transition-base;
				}
			}
		}
	
		.slick-arrow { opacity: 0; }
	
		.ed-content-slider:hover {
			.slick-arrow {
				visibility: visible;
				opacity: 1;
			}
		
			.edit &,
			.preview & {
				> .inner {
					&:before,
					&:after {
						visibility: visible;
						opacity: 1;
					}
				}
			}
		}
	}

	@else  {
		.slick-arrow {
			@media screen and (min-width: $breakpoint-xs) {
				visibility: visible;
			}
		}
	}

	/*##################################
																					     SHOW/HIDE on hover -End
																					##################################*/
	/*##################################
																					     SHOW/HIDE on mobile -Beginn
																					##################################*/
	@media screen and (max-width: $breakpoint-sm-max) {
		>.inner	.slick-arrow {
			@if $arrows-show-on-mobile == "show" { display: block; }
		
			@else if $arrows-show-on-hover == "hover_only" and $arrows-show-on-mobile != "show" {
				display: none;
				opacity: 0;
				visibility: hidden;
			}
		
			@else  {
				display: none;
				opacity: 0;
			}
		}
	}

	/*##################################
																					     SHOW/HIDE Arrows on mobile -End
																					##################################*/
	/*##################################
																					     ARROWS-STYLE -Beginn
																					##################################*/
	//STYLE TOP
	@if $arrow-style == "top" {
		@if nth($arrow-position-lg,1) == "outside" {
			.slick-arrow {
				top: 0;
				bottom: auto;
			}
		}
		@else if nth($arrow-position-lg,1) == "inside" {
			.slick-arrow {
				bottom: auto;
				top: 1rem;
			}
		}
	
		@media screen and (max-width:$breakpoint-md-max) {
			@if nth($arrow-position-md,1) == "outside" {
				.slick-arrow {
					top: 0;
					bottom: auto;
				}
			}
			@else if nth($arrow-position-md,1) == "inside" {
				.slick-arrow {
					bottom: auto;
					top: 1rem;
				}
			}
		}
	
		@media screen and (max-width:$breakpoint-sm-max) {
			@if nth($arrow-position-xs,1) == "outside" {
				.slick-arrow {
					top: 0;
					bottom: auto;
				}
			}
			@else if nth($arrow-position-xs,1) == "inside" {
				.slick-arrow {
					bottom: auto;
					top: 1rem;
				}
			}
		}
	}

	// STYLE BOTTOM
	@else if $arrow-style == "bottom" {
		@if nth($arrow-position-lg,1) == "outside" {
			.slick-arrow {
				top: auto;
				bottom: 0;
			}
		}
		@else if nth($arrow-position-lg,1) == "inside" {
			.slick-arrow {
				top: auto;
				bottom: 1rem;
			}
		}
	
		@media screen and (max-width:$breakpoint-md-max) {
			@if nth($arrow-position-md,1) == "outside" {
				.slick-arrow.slick-prev {
					left: -$arrow-size-md;
					right: auto;
				}
			
				.slick-arrow.slick-next {
					right: -$arrow-size-md;
					left: auto;
				}
			}
		
			@else if nth($arrow-position-md,1) == "inside" {
				.slick-arrow.slick-prev {
					left: calc(#{$margin-md} + 1rem);
					right: auto;
					bottom: 1rem;
				}
			
				.slick-arrow.slick-next {
					right: calc(#{$margin-md} + 1rem);
					left: auto;
					bottom: 1rem;
				}
			}
		}
	
		@media screen and (max-width:$breakpoint-sm-max) {
			@if nth($arrow-position-xs,1) == "outside" {
				.slick-arrow.slick-prev {
					left: -$arrow-size-xs;
					top: auto;
					bottom: 0;
				}
			
				.slick-arrow.slick-next {
					right: -$arrow-size-xs;
					left: auto;
					bottom: 0;
				}
			}
		
			@else if nth($arrow-position-xs,1) == "inside" {
				.slick-arrow.slick-prev {
					left: calc(#{$margin-xs} + 1rem);
					right: auto;
					top: auto;
					bottom: $margin-xs;
				}
			
				.slick-arrow.slick-next {
					right: calc(#{$margin-xs} + 1rem);
					left: auto;
					bottom: $margin-xs;
				}
			}
		}
	}

	// STYLE DIAGONAL
	@else if $arrow-style == "diagonal" {
		@if nth($arrow-position-lg,1) == "outside" {
			.slick-arrow.slick-prev {
				top: auto;
				bottom: 0;
			}
		
			.slick-arrow.slick-next {
				top: 0;
				bottom: auto;
			}
		}
	
		@else if nth($arrow-position-lg,1) == "inside" {
			.slick-arrow.slick-prev {
				top: auto;
				bottom: 1rem;
			}
		
			.slick-arrow.slick-next {
				top: 1rem;
				bottom: auto;
			}
		}
	
		@media screen and (max-width:$breakpoint-md-max) {
			@if nth($arrow-position-md,1) == "outside" {
				.slick-arrow.slick-prev {
					top: auto;
					bottom: 0;
				}
			
				.slick-arrow.slick-next {
					top: 0;
					bottom: auto;
				}
			}
		
			@else if nth($arrow-position-md,1) == "inside" {
				.slick-arrow.slick-prev {
					top: auto;
					bottom: 1rem;
				}
			
				.slick-arrow.slick-next {
					top: 1rem;
					bottom: auto;
				}
			}
		}
	
		@media screen and (max-width:$breakpoint-sm-max) {
			@if nth($arrow-position-xs,1) == "outside" {
				.slick-arrow.slick-prev {
					top: auto;
					bottom: 0;
				}
			
				.slick-arrow.slick-next {
					top: 0;
					bottom: auto;
				}
			}
		
			@else if nth($arrow-position-xs,1) == "inside" {
				.slick-arrow.slick-prev {
					top: auto;
					bottom: 1rem;
				}
			
				.slick-arrow.slick-next {
					top: 1rem;
					bottom: auto;
				}
			}
		}
	}

	//STYLE FULL HEIGHT
	@else if $arrow-style == "full-height" {
		.slick-arrow {
			bottom: auto;
			height: 100%;
		}
	
		@if nth($arrow-position-lg,1) == "outside" {
			.slick-arrow.slick-prev { right: auto; }
			.slick-arrow.slick-next { left: auto; }
		}
	
		@else if nth($arrow-position-lg,1) == "inside" {
			.slick-arrow.slick-prev { right: auto; }
			.slick-arrow.slick-next { left: auto; }
		}
	
		@media screen and (max-width:$breakpoint-md-max) {
			@if nth($arrow-position-md,1) == "outside" {
				.slick-arrow.slick-prev { right: auto; }
				.slick-arrow.slick-next { left: auto; }
			}
		
			@else if nth($arrow-position-md,1) == "inside" {
				.slick-arrow.slick-prev { right: auto; }
				.slick-arrow.slick-next { left: auto; }
			}
		}
	
		@media screen and (max-width:$breakpoint-sm-max) {
			@if nth($arrow-position-xs,1) == "outside" {
				.slick-arrow.slick-prev { right: auto; }
				.slick-arrow.slick-next { left: auto; }
			}
		
			@else if nth($arrow-position-xs,1) == "inside" {
				.slick-arrow.slick-prev { right: auto; }
				.slick-arrow.slick-next { left: auto; }
			}
		}
	}

	// STYLE HALF WIDTH
	@else if $arrow-style == "half-width" {
		.slick-arrow {
			top: auto;
			width: 50%;
		}
	
		@if nth($arrow-position-lg,1) == "outside" {
			.slick-arrow.slick-prev {
				left: $margin-lg;
				right: auto;
				width: calc(50% - #{$margin-lg});
			}
		
			.slick-arrow.slick-next {
				right: $margin-lg;
				left: auto;
				width: calc(50% - #{$margin-lg});
			}
		}
	
		@else if nth($arrow-position-lg,1) == "inside" {
			.slick-arrow.slick-prev {
				left: $margin-lg;
				right: auto;
				width: calc(50% - #{$margin-lg});
			}
		
			.slick-arrow.slick-next {
				right: $margin-lg;
				left: auto;
				width: calc(50% - #{$margin-lg});
			}
		}
	
		@media screen and (max-width:$breakpoint-md-max) {
			@if nth($arrow-position-md,1) == "outside" {
				.slick-arrow.slick-prev {
					left: $margin-md;
					right: auto;
					width: calc(50% - #{$margin-md});
				}
			
				.slick-arrow.slick-next {
					right: $margin-md;
					left: auto;
					width: calc(50% - #{$margin-md});
				}
			}
		
			@else if nth($arrow-position-md,1) == "inside" {
				.slick-arrow.slick-prev {
					left: $margin-md;
					right: auto;
					width: calc(50% - #{$margin-md});
				}
			
				.slick-arrow.slick-next {
					right: $margin-md;
					left: auto;
					width: calc(50% - #{$margin-md});
				}
			}
		}
	
		@media screen and (max-width:$breakpoint-sm-max) {
			@if nth($arrow-position-xs,1) == "outside" {
				.slick-arrow.slick-prev {
					left: $margin-xs;
					right: auto;
					width: calc(50% - #{$margin-xs});
				}
			
				.slick-arrow.slick-next {
					right: $margin-xs;
					left: auto;
					width: calc(50% - #{$margin-xs});
				}
			}
		
			@else if nth($arrow-position-xs,1) == "inside" {
				.slick-arrow.slick-prev {
					left: $margin-xs;
					right: auto;
					width: calc(50% - #{$margin-xs});
				}
			
				.slick-arrow.slick-next {
					right: $margin-xs;
					left: auto;
					width: calc(50% - #{$margin-xs});
				}
			}
		}
	}

	/*##################################
																					     ARROWS-STYLE -End
																					##################################*/
	/*##################################
																					     ARROWS-ICON -Beginn
																					##################################*/
	@if $arrow-icon == "thin_icon" {
		.slick-arrow.slick-prev {
			&:before { content: "\f104"; }
		}
	
		.slick-arrow.slick-next {
			&:before { content: "\f105"; }
		}
	}

	@else if $arrow-icon == "thick_icon" {
		.slick-arrow.slick-prev {
			&:before { content: "\f053"; }
		}
	
		.slick-arrow.slick-next {
			&:before { content: "\f054"; }
		}
	}

	@else if $arrow-icon == "long_icon" {
		.slick-arrow.slick-prev {
			&:before { content: "\f177"; }
		}
	
		.slick-arrow.slick-next {
			&:before { content: "\f178"; }
		}
	}

	/*##################################
																					     ARROWS-ICON -End
																					##################################*/
	/*##################################
																					     STYLING FOR THE DOTS -Beginn
																					##################################*/
	.edit &,
	.preview & {
		.dots {
			display: block;
		
			&,
			.slick-dots li { pointer-events: none; }
		
			li:first-child button { background: $dots-color-active; }
		}
	}

	.ed-element.ed-content-slider .slick-dots {
		position: absolute;
		left: 50%;
		transform: translateX(-50%);
		width: 100%;
	
		@if nth($dots-position-lg,1) == "outside" {
			@include media-constructor(bottom, extend-constructor('calc(-', $dots-height, ' - '), extend-constructor('', $dots-space ,')'));
		}
		@else  {
			@include media-constructor(bottom, $dots-space);
		}
	
		@media screen and(max-width: $breakpoint-md-max) {
			@if nth($dots-position-md,1) == "outside" {
				@include media-constructor(bottom, extend-constructor('calc(-', $dots-height, ' - '), extend-constructor('', $dots-space ,')'));
			}
			@else  {
				@include media-constructor(bottom, $dots-space);
			}
		}
	
		@media screen and(max-width: $breakpoint-sm-max) {
			@if nth($dots-position-xs,1) == "outside" {
				@include media-constructor(bottom, extend-constructor('calc(-', $dots-height, ' - '), extend-constructor('', $dots-space ,')'));
			}
			@else  {
				@include media-constructor(bottom, $dots-space);
			}
		}
	
		li {
			@include media-constructor(
				margin, 
				extend-constructor('0 ',$dots-margin,''), 
				extend-constructor('0 ',$dots-margin,'')
			);
		
			button {
				background: $dots-color-check;
			
				@include media-constructor(height, $dots-height);
				@include media-constructor(width, $dots-width);
			
				//Border Radius
				@include media-constructor(border-radius, $border-radius-tertiary);
			}
		
			&.slick-active {
				button { background: $dots-color-active; }
			}
		}
	}

	/*##################################
																					     STYLING FOR THE DOTS -End
																					##################################*/
}
